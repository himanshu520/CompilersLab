(* This file contains the ML-Yacc specifications of parser for the Tiger Language *)

(* This is the preamble where we can have arbitrary sml code. For us
it is empty *)

%%

(* Name of the parser *)
%name Tiger

(* Produces verbose description of the generated LALR parser *)
%verbose

(* type to capture the position of a token within a file *)
%pos int

(* The terminals or tokens of the language.
   Similar to ML datatype declaration.
   The terminals with no datatype have no value associated with them *)
%term INTEGER of int
    | ID of string
    | STRING of string
    | ARRAY
    | BREAK
    | DO
    | ELSE
    | END
    | FOR
    | FUNCTION
    | IF
    | IN
    | LET
    | NIL
    | OF
    | THEN
    | TO
    | TYPE
    | VAR
    | WHILE
    | NOTEQUAL
    | LESSEQUAL
    | GREATEREQUAL
    | ASSIGN
    | LPAREN
    | RPAREN
    | LBRACES
    | RBRACES
    | LBRACKETS
    | RBRACKETS
    | COLON
    | DOT
    | SEMICOLON
    | COMMA
    | PLUS
    | MINUS
    | EQUALS
    | MULTIPLY
    | DIVIDE 
    | LESS
    | GREATER
    | AND
    | OR
    | EOF
    
(* The nonterminals or symbols of the language.
   The types for the nonterminals are the correspoding abstract syntax used to capture the semantic 
   meaning of the values associated with the nonterminal *)
%nonterm argList            of Absyn.Exp list
       | argListTail        of Absyn.Exp list
       | arrCreate          of (string * Absyn.Exp * Absyn.Exp)
       | assignment         of (Absyn.lValue * Absyn.Exp)
       | callExp            of (string * Absyn.Exp list)
       | dec                of Absyn.Dec
       | decList            of Absyn.Dec list
       | exp                of Absyn.Exp
       | expList            of Absyn.Exp list
       | expListTail        of Absyn.Exp list
       | fldC               of string * Absyn.Exp
       | fldCreat           of (string * Absyn.Exp) list
       | fldCreatTail       of (string * Absyn.Exp) list
       | fldD               of (string * string)
       | fldDec             of (string * string) list
       | fldDecList         of (string * string) list
       | forExp             of (string * Absyn.Exp * Absyn.Exp * Absyn.Exp)
       | funDec             of Absyn.FunDec
       | ifThen             of (Absyn.Exp * Absyn.Exp)
       | ifThenElse         of (Absyn.Exp * Absyn.Exp * Absyn.Exp)
       | infixExp           of (Absyn.Exp * Absyn.Operator * Absyn.Exp)
       | letExp             of (Absyn.Dec list * Absyn.Exp list)
       | lValue             of Absyn.lValue
       | negation           of Absyn.Exp
       | program            of Absyn.Program
       | recCreate          of (string * (string * Absyn.Exp) list)
       | seqExp             of Absyn.Exp list
       | tyDec              of Absyn.TypeDec
       | varDec             of Absyn.VarDec
       | whileExp           of (Absyn.Exp * Absyn.Exp)


%eop EOF                (* the set of terminals that may follow the start symbol *)
%pure                   (* the semantic actions are free of significant side-effects and always terminate *)
%noshift EOF            (* non-shiftable terminals *)

(* Specifying the keywords *)
%keyword ARRAY BREAK DO ELSE END FOR FUNCTION IF IN LET NIL OF THEN TO TYPE VAR WHILE

(* Tokens to insert during error correction *)
%value ID ( "bogus" )
%value INTEGER ( 1 )
%value STRING ( "" )

(* replacement suggestions during error correction *)
%change EQUALS -> ASSIGN
      | ASSIGN -> EQUALS
      | SEMICOLON ELSE -> ELSE
      | COMMA -> SEMICOLON
      | SEMICOLON -> COMMA
      |  -> LPAREN 
      |  -> ELSE
      |  -> THEN
      |  -> IN INTEGER END

(* Specifying the precedence and associativity of operators *)
%nonassoc DO OF THEN
%right ELSE
%nonassoc ASSIGN
%left OR
%left AND 
%nonassoc GREATEREQUAL LESSEQUAL EQUALS NOTEQUAL LESS GREATER
%left PLUS MINUS
%left MULTIPLY DIVIDE

%%

(* The grammar associated with our program *)
program     : exp                                                       ( exp )


exp         : NIL                                                       ( Absyn.Nil )
            | INTEGER                                                   ( Absyn.Integer INTEGER )
            | STRING                                                    ( Absyn.String STRING )
            | lValue                                                    ( Absyn.Lvalue lValue )
            | negation                                                  ( Absyn.Negation negation )
            | seqExp                                                    ( Absyn.ExpList seqExp )
            | callExp                                                   ( Absyn.FunCall callExp )
            | infixExp                                                  ( Absyn.BinOp infixExp )
            | arrCreate                                                 ( Absyn.Array arrCreate )
            | recCreate                                                 ( Absyn.Record recCreate )
            | assignment                                                ( Absyn.Assignment assignment )
            | ifThenElse                                                ( Absyn.IfThenElse ifThenElse )
            | ifThen                                                    ( Absyn.IfThen ifThen )
            | whileExp                                                  ( Absyn.While whileExp )
            | forExp                                                    ( Absyn.For forExp )
            | letExp                                                    ( Absyn.Let letExp )
            | BREAK                                                     ( Absyn.Break )


seqExp      : LPAREN expList RPAREN                                     ( expList )
expList     :                                                           ( [] )
            | exp expListTail                                           ( exp :: expListTail )
expListTail :                                                           ( [] )
            | SEMICOLON exp expListTail                                 ( exp :: expListTail )


negation    : MINUS exp                                                 ( exp )


callExp     : ID LPAREN argList RPAREN                                  ( (ID, argList) )
argList     :                                                           ( [] )
            | exp argListTail                                           ( exp :: argListTail )
argListTail :                                                           ( [] )
            | COMMA exp argListTail                                     ( exp :: argListTail )


infixExp    : exp PLUS exp                                              ( (exp1, Absyn.Plus, exp2) )
            | exp MINUS exp                                             ( (exp1, Absyn.Minus, exp2) )
            | exp MULTIPLY exp                                          ( (exp1, Absyn.Multiply, exp2) )
            | exp DIVIDE exp                                            ( (exp1, Absyn.Divide, exp2) )
            | exp GREATER exp                                           ( (exp1, Absyn.Greater, exp2) )
            | exp LESS exp                                              ( (exp1, Absyn.Less, exp2) )
            | exp EQUALS exp                                            ( (exp1, Absyn.Equals, exp2) )
            | exp NOTEQUAL exp                                          ( (exp1, Absyn.NotEqual, exp2) )
            | exp LESSEQUAL exp                                         ( (exp1, Absyn.LessEqual, exp2) )
            | exp GREATEREQUAL exp                                      ( (exp1, Absyn.GreaterEqual, exp2) )
            | exp AND exp                                               ( (exp1, Absyn.And, exp2) )
            | exp OR exp                                                ( (exp1, Absyn.Or, exp2) )


arrCreate   : ID LBRACKETS exp RBRACKETS OF exp                         ( (ID, exp1, exp2) )


recCreate   : ID LBRACES fldCreat RBRACES                               ( (ID, fldCreat) )
fldC        : ID EQUALS exp                                             ( (ID, exp) )
fldCreat    :                                                           ( [] )
            | fldC fldCreatTail                                         ( fldC :: fldCreatTail )
fldCreatTail:                                                           ( [] )
            | COMMA fldC fldCreatTail                                   ( fldC :: fldCreatTail )


assignment  : lValue ASSIGN exp                                         ( (lValue, exp) )


ifThenElse  : IF exp THEN exp ELSE exp                                  ( (exp1, exp2, exp3) )
ifThen      : IF exp THEN exp                                           ( (exp1, exp2) )


whileExp    : WHILE exp DO exp                                          ( (exp1, exp2) )
forExp      : FOR ID ASSIGN exp TO exp DO exp                           ( (ID, exp1, exp2, exp3) )


letExp      : LET decList IN expList END                                ( (decList, expList) )
decList     : dec                                                       ( [dec] )
            | dec decList                                               ( dec :: decList )


dec         : tyDec                                                     ( Absyn.TyDec tyDec )
            | varDec                                                    ( Absyn.VDec varDec )
            | funDec                                                    ( Absyn.FDec funDec )


tyDec       : TYPE ID EQUALS ID                                         ( Absyn.TypeAssignment (ID1, ID2) )
            | TYPE ID EQUALS ARRAY OF ID                                ( Absyn.ArrayType (ID1, ID2) )
            | TYPE ID EQUALS LBRACES fldDec RBRACES                     ( Absyn.RecordType (ID, fldDec) )
fldD        : ID COLON ID                                               ( (ID1, ID2) )
fldDec      :                                                           ( [] )
            | fldD fldDecList                                           ( fldD :: fldDecList )
fldDecList  :                                                           ( [] )
            | COMMA fldD fldDecList                                     ( fldD :: fldDecList )


funDec      : FUNCTION ID LPAREN fldDec RPAREN EQUALS exp               ( Absyn.Fun (ID, fldDec, exp) )
            | FUNCTION ID LPAREN fldDec RPAREN COLON ID EQUALS exp      ( Absyn.FunType (ID1, fldDec, ID2, exp) )


varDec      : VAR ID ASSIGN exp                                         ( Absyn.Var (ID, exp) )
            | VAR ID COLON ID ASSIGN exp                                ( Absyn.VarType (ID1, ID2, exp) )


lValue      : ID                                                        ( Absyn.Id ID )
            | lValue LBRACKETS exp RBRACKETS                            ( Absyn.Subscript (lValue, exp) )
            | lValue DOT ID                                             ( Absyn.Field (lValue, ID) )