(* This file contains the ML-Yacc specifications of parser for the Tiger Language *)

(* This is the preamble where we can have arbitrary sml code *)
structure A = Absyn
structure S = Symbol

datatype lValueVar = Field of S.symbol
                   | Subscript of A.exp

fun makeLvalueVar (v, pos, l::r) = ( case l of Field idsym => makeLvalueVar (A.FieldVar (v, idsym, pos), pos, r)
                                             | Subscript exp => makeLvalueVar (A.SubscriptVar (v, exp, pos), pos, r) )
|   makeLvalueVar (v, _, nil) = v


%%

(* Name of the parser *)
%name Tiger

(* Produces verbose description of the generated LALR parser *)
%verbose

(* type to capture the position of a token within a file *)
%pos int

(* The terminals or tokens of the language.
   Similar to ML datatype declaration.
   The terminals with no datatype have no value associated with them *)
%term INTEGER of int
    | ID of string
    | STRING of string
    | ARRAY
    | BREAK
    | DO
    | ELSE
    | END
    | FOR
    | FUNCTION
    | IF
    | IN
    | LET
    | NIL
    | OF
    | THEN
    | TO
    | TYPE
    | VAR
    | WHILE
    | NOTEQUAL
    | LESSEQUAL
    | GREATEREQUAL
    | ASSIGN
    | LPAREN
    | RPAREN
    | LBRACES
    | RBRACES
    | LBRACKETS
    | RBRACKETS
    | COLON
    | DOT
    | SEMICOLON
    | COMMA
    | PLUS
    | MINUS
    | EQUALS
    | MULTIPLY
    | DIVIDE 
    | LESS
    | GREATER
    | AND
    | OR
    | EOF
    | LOWPREC
    
(* The nonterminals or symbols of the language.
   The types for the nonterminals are the correspoding abstract syntax used to capture the semantic 
   meaning of the values associated with the nonterminal *)
%nonterm argList            of A.exp list
       | argListTail        of A.exp list
       | arrCreate          of { typ : S.symbol, size : A.exp, init : A.exp, pos : A.pos }
       | assignment         of { var : A.var, exp : A.exp, pos : A.pos }
       | callExp            of { func : S.symbol, args : A.exp list, pos : A.pos }
       | dec                of A.dec
       | decList            of A.dec list
       | exp                of A.exp
       | expList            of (A.exp * A.pos) list
       | expListTail        of (A.exp * A.pos) list
       | fldC               of (S.symbol * A.exp * A.pos)
       | fldCreat           of (S.symbol * A.exp * A.pos) list
       | fldCreatTail       of (S.symbol * A.exp * A.pos) list
       | fldD               of { name : S.symbol, escape : bool ref, typ : S.symbol, pos : A.pos }
       | fldDec             of A.field list
       | fldDecList         of A.field list
       | forExp             of { var : S.symbol, escape : bool ref, lo : A.exp, hi : A.exp, body : A.exp, pos : A.pos }
       | funDec             of A.fundec
       | funDecs            of A.fundec list
       | ifThen             of { test : A.exp, then' : A.exp, else' : A.exp option, pos : A.pos }
       | ifThenElse         of { test : A.exp, then' : A.exp, else' : A.exp option, pos : A.pos }
       | infixExp           of { left : A.exp, oper : A.oper, right : A.exp, pos : A.pos }
       | letExp             of { decs : A.dec list, body : A.exp, pos : A.pos }
       | lValue             of A.var
       | lValueTail         of lValueVar list
       | negation           of { left : A.exp, oper : A.oper, right : A.exp, pos : A.pos }
       | program            of A.exp
       | recCreate          of { fields : (S.symbol * A.exp * A.pos) list, typ : S.symbol, pos : A.pos }
       | seqExp             of (A.exp * A.pos) list
       | tyDec              of { name : S.symbol, ty : A.ty, pos : A.pos }
       | tyDecs             of { name : S.symbol, ty : A.ty, pos : A.pos } list
       | varDec             of { name : A.symbol, escape : bool ref, typ : (S.symbol * A.pos) option, init : A.exp, pos : A.pos }
       | whileExp           of { test : A.exp, body : A.exp, pos : A.pos }


%eop EOF                (* the set of terminals that may follow the start symbol *)
%pure                   (* the semantic actions are free of significant side-effects and always terminate *)
%noshift EOF            (* non-shiftable terminals *)

(* Specifying the keywords *)
%keyword ARRAY BREAK DO ELSE END FOR FUNCTION IF IN LET NIL OF THEN TO TYPE VAR WHILE

(* Tokens to insert during error correction *)
%value ID ( "bogus" )
%value INTEGER ( 1 )
%value STRING ( "" )

(* replacement suggestions during error correction *)
%change EQUALS -> ASSIGN
      | ASSIGN -> EQUALS
      | SEMICOLON ELSE -> ELSE
      | COMMA -> SEMICOLON
      | SEMICOLON -> COMMA
      |  -> LPAREN 
      |  -> ELSE
      |  -> THEN
      |  -> IN INTEGER END

(* Specifying the precedence and associativity of operators *)
%nonassoc LOWPREC
%nonassoc DO OF THEN FUNCTION TYPE
%right ELSE
%nonassoc ASSIGN
%left OR
%left AND 
%nonassoc GREATEREQUAL LESSEQUAL EQUALS NOTEQUAL LESS GREATER
%left PLUS MINUS
%left MULTIPLY DIVIDE

%%

(* The grammar associated with our program *)
program     : exp                                                       ( exp )


exp         : NIL                                                       ( A.NilExp )
            | INTEGER                                                   ( A.IntExp INTEGER )
            | STRING                                                    ( A.StringExp (STRING, STRINGleft) )
            | lValue                                                    ( A.VarExp lValue )
            | negation                                                  ( A.OpExp negation )
            | seqExp                                                    ( A.SeqExp seqExp )
            | callExp                                                   ( A.CallExp callExp )
            | infixExp                                                  ( A.OpExp infixExp )
            | arrCreate                                                 ( A.ArrayExp arrCreate )
            | recCreate                                                 ( A.RecordExp recCreate )
            | assignment                                                ( A.AssignExp assignment )
            | ifThenElse                                                ( A.IfExp ifThenElse )
            | ifThen                                                    ( A.IfExp ifThen )
            | whileExp                                                  ( A.WhileExp whileExp )
            | forExp                                                    ( A.ForExp forExp )
            | letExp                                                    ( A.LetExp letExp )
            | BREAK                                                     ( A.BreakExp BREAKleft)


seqExp      : LPAREN expList RPAREN                                     ( expList )
expList     :                                                           ( [] )
            | exp expListTail                                           ( (exp, expleft) :: expListTail )
expListTail :                                                           ( [] )
            | SEMICOLON exp expListTail                                 ( (exp, expleft) :: expListTail )


negation    : MINUS exp                                                 ( { left = A.IntExp 0, oper = A.MinusOp, right = exp, pos = MINUSleft} )


callExp     : ID LPAREN argList RPAREN                                  ( { func = Symbol.symbol ID, args = argList, pos = IDleft } )
argList     :                                                           ( [] )
            | exp argListTail                                           ( exp :: argListTail )
argListTail :                                                           ( [] )
            | COMMA exp argListTail                                     ( exp :: argListTail )


infixExp    : exp PLUS exp                                              ( { left = exp1, oper = A.PlusOp, right = exp2, pos = PLUSleft } )
            | exp MINUS exp                                             ( { left = exp1, oper = A.MinusOp, right = exp2, pos = MINUSleft } )
            | exp MULTIPLY exp                                          ( { left = exp1, oper = A.TimesOp, right = exp2, pos = MULTIPLYleft } )
            | exp DIVIDE exp                                            ( { left = exp1, oper = A.DivideOp, right = exp2, pos = DIVIDEleft } )
            | exp GREATER exp                                           ( { left = exp1, oper = A.GtOp, right = exp2, pos = GREATERleft } )
            | exp LESS exp                                              ( { left = exp1, oper = A.LtOp, right = exp2, pos = LESSleft } )
            | exp EQUALS exp                                            ( { left = exp1, oper = A.EqOp, right = exp2, pos = EQUALSleft } )
            | exp NOTEQUAL exp                                          ( { left = exp1, oper = A.NeqOp, right = exp2, pos = NOTEQUALleft } )
            | exp LESSEQUAL exp                                         ( { left = exp1, oper = A.LeOp, right = exp2, pos = LESSEQUALleft } )
            | exp GREATEREQUAL exp                                      ( { left = exp1, oper = A.GeOp, right = exp2, pos = GREATEREQUALleft } )


arrCreate   : ID LBRACKETS exp RBRACKETS OF exp                         ( { typ = S.symbol ID, size = exp1, init = exp2, pos = IDleft } )


recCreate   : ID LBRACES fldCreat RBRACES                               ( { fields = fldCreat, typ = S.symbol ID, pos = IDleft } )
fldC        : ID EQUALS exp                                             ( (S.symbol ID, exp, IDleft) )
fldCreat    :                                                           ( [] )
            | fldC fldCreatTail                                         ( fldC :: fldCreatTail )
fldCreatTail:                                                           ( [] )
            | COMMA fldC fldCreatTail                                   ( fldC :: fldCreatTail )


assignment  : lValue ASSIGN exp                                         ( { var = lValue, exp = exp, pos = ASSIGNleft } )


ifThenElse  : IF exp THEN exp ELSE exp                                  ( { test = exp1, then' = exp2, else' = SOME exp3, pos = IFleft } )
            | exp AND exp                                               ( { test = exp1, then' = exp2, else' = SOME (A.IntExp 0), pos = ANDleft } )
            | exp OR exp                                                ( { test = exp1, then' = A.IntExp 1, else' = SOME exp2, pos = ORleft } )
ifThen      : IF exp THEN exp                                           ( { test = exp1, then' = exp2, else' = NONE, pos = IFleft } )


whileExp    : WHILE exp DO exp                                          ( { test = exp1, body = exp2, pos = WHILEleft } )
forExp      : FOR ID ASSIGN exp TO exp DO exp                           ( { var = S.symbol ID, escape = ref true, lo = exp1, hi = exp2, body = exp3, pos = FORleft } )


letExp      : LET decList IN expList END                                ( { decs = decList, body = A.SeqExp expList, pos = LETleft } )
decList     : dec                                                       ( [dec] )
            | dec decList                                               ( dec :: decList )


dec         : tyDecs %prec LOWPREC                                      ( A.TypeDec tyDecs )
            | varDec                                                    ( A.VarDec varDec )
            | funDecs %prec LOWPREC                                     ( A.FunctionDec funDecs )

tyDecs      : tyDec                                                     ( [tyDec] )
            | tyDecs tyDec                                              ( tyDecs @ [tyDec] )
tyDec       : TYPE ID EQUALS ID                                         ( { name = S.symbol ID1, ty = A.NameTy (S.symbol ID2, ID2left), pos = TYPEleft } )
            | TYPE ID EQUALS ARRAY OF ID                                ( { name = S.symbol ID1, ty = A.ArrayTy (S.symbol ID2, ID2left), pos = TYPEleft } )
            | TYPE ID EQUALS LBRACES fldDec RBRACES                     ( { name = S.symbol ID, ty = A.RecordTy fldDec, pos = TYPEleft } )
fldD        : ID COLON ID                                               ( { name = S.symbol ID1, escape = ref true, typ = S.symbol ID2, pos = ID1left } )
fldDec      :                                                           ( [] )
            | fldD fldDecList                                           ( fldD :: fldDecList )
fldDecList  :                                                           ( [] )
            | COMMA fldD fldDecList                                     ( fldD :: fldDecList )

funDecs     : funDec                                                    ( [funDec] )
            | funDecs funDec                                            ( funDecs @ [funDec] )
funDec      : FUNCTION ID LPAREN fldDec RPAREN EQUALS exp               ( { name = S.symbol ID, params = fldDec, result = NONE, body = exp, pos = FUNCTIONleft } )
            | FUNCTION ID LPAREN fldDec RPAREN COLON ID EQUALS exp      ( { name = S.symbol ID1, params = fldDec, result = SOME (S.symbol ID2, ID2left), body = exp, pos = FUNCTIONleft } )


varDec      : VAR ID ASSIGN exp                                         ( { name = S.symbol ID, escape = ref true, typ = NONE, init = exp, pos = VARleft } )
            | VAR ID COLON ID ASSIGN exp                                ( { name = S.symbol ID1, escape = ref true, typ = SOME (S.symbol ID2, ID2left), init = exp, pos = VARleft } )


lValue      : ID lValueTail                                             ( makeLvalueVar (A.SimpleVar (S.symbol ID, IDleft), IDleft, lValueTail) )
lValueTail  :                                                           ( [] )
            | LBRACKETS exp RBRACKETS lValueTail                        ( (Subscript exp) :: lValueTail )
            | DOT ID lValueTail                                         ( Field (S.symbol ID) :: lValueTail )