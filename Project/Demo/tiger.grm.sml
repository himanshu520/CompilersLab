functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(* This file contains the ML-Yacc specifications of parser for the Tiger Language *)

(* This is the preamble where we can have arbitrary sml code *)
structure A = Absyn
structure S = Symbol

datatype lValueVar = Field of S.symbol
                   | Subscript of A.exp

fun makeLvalueVar (v, pos, l::r) = ( case l of Field idsym => makeLvalueVar (A.FieldVar (v, idsym, pos), pos, r)
                                             | Subscript exp => makeLvalueVar (A.SubscriptVar (v, exp, pos), pos, r) )
|   makeLvalueVar (v, _, nil) = v



end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\027\000\002\000\026\000\003\000\025\000\005\000\024\000\
\\009\000\023\000\011\000\022\000\013\000\021\000\014\000\020\000\
\\020\000\019\000\025\000\018\000\036\000\017\000\000\000\
\\001\000\002\000\056\000\000\000\
\\001\000\002\000\083\000\000\000\
\\001\000\002\000\084\000\000\000\
\\001\000\002\000\085\000\000\000\
\\001\000\002\000\088\000\000\000\
\\001\000\002\000\092\000\000\000\
\\001\000\002\000\116\000\000\000\
\\001\000\002\000\120\000\004\000\119\000\027\000\118\000\000\000\
\\001\000\002\000\123\000\000\000\
\\001\000\002\000\147\000\000\000\
\\001\000\002\000\151\000\000\000\
\\001\000\002\000\154\000\000\000\
\\001\000\006\000\193\000\007\000\193\000\008\000\193\000\010\000\193\000\
\\012\000\193\000\016\000\193\000\017\000\193\000\018\000\193\000\
\\019\000\193\000\026\000\193\000\028\000\193\000\030\000\193\000\
\\033\000\193\000\034\000\193\000\035\000\037\000\036\000\036\000\
\\038\000\034\000\039\000\033\000\042\000\193\000\043\000\193\000\
\\044\000\193\000\000\000\
\\001\000\006\000\194\000\007\000\194\000\008\000\194\000\010\000\194\000\
\\012\000\194\000\016\000\194\000\017\000\194\000\018\000\194\000\
\\019\000\194\000\026\000\194\000\028\000\194\000\030\000\194\000\
\\033\000\194\000\034\000\194\000\035\000\037\000\036\000\036\000\
\\038\000\034\000\039\000\033\000\042\000\194\000\043\000\194\000\
\\044\000\194\000\000\000\
\\001\000\006\000\195\000\007\000\195\000\008\000\195\000\010\000\195\000\
\\012\000\195\000\016\000\195\000\017\000\195\000\018\000\195\000\
\\019\000\195\000\026\000\195\000\028\000\195\000\030\000\195\000\
\\033\000\195\000\034\000\195\000\035\000\037\000\036\000\036\000\
\\038\000\034\000\039\000\033\000\042\000\195\000\043\000\195\000\
\\044\000\195\000\000\000\
\\001\000\006\000\196\000\007\000\196\000\008\000\196\000\010\000\196\000\
\\012\000\196\000\016\000\196\000\017\000\196\000\018\000\196\000\
\\019\000\196\000\026\000\196\000\028\000\196\000\030\000\196\000\
\\033\000\196\000\034\000\196\000\035\000\037\000\036\000\036\000\
\\038\000\034\000\039\000\033\000\042\000\196\000\043\000\196\000\
\\044\000\196\000\000\000\
\\001\000\006\000\197\000\007\000\197\000\008\000\197\000\010\000\197\000\
\\012\000\197\000\016\000\197\000\017\000\197\000\018\000\197\000\
\\019\000\197\000\026\000\197\000\028\000\197\000\030\000\197\000\
\\033\000\197\000\034\000\197\000\035\000\037\000\036\000\036\000\
\\038\000\034\000\039\000\033\000\042\000\197\000\043\000\197\000\
\\044\000\197\000\000\000\
\\001\000\006\000\198\000\007\000\198\000\008\000\198\000\010\000\198\000\
\\012\000\198\000\016\000\198\000\017\000\198\000\018\000\198\000\
\\019\000\198\000\026\000\198\000\028\000\198\000\030\000\198\000\
\\033\000\198\000\034\000\198\000\035\000\037\000\036\000\036\000\
\\038\000\034\000\039\000\033\000\042\000\198\000\043\000\198\000\
\\044\000\198\000\000\000\
\\001\000\006\000\078\000\021\000\040\000\022\000\039\000\023\000\038\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\001\000\006\000\152\000\021\000\040\000\022\000\039\000\023\000\038\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\001\000\008\000\115\000\000\000\
\\001\000\010\000\054\000\018\000\053\000\019\000\052\000\000\000\
\\001\000\012\000\081\000\000\000\
\\001\000\015\000\134\000\000\000\
\\001\000\016\000\086\000\021\000\040\000\022\000\039\000\023\000\038\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\001\000\017\000\125\000\021\000\040\000\022\000\039\000\023\000\038\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\001\000\021\000\040\000\022\000\039\000\023\000\038\000\030\000\106\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\001\000\021\000\040\000\022\000\039\000\023\000\038\000\030\000\141\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\001\000\024\000\087\000\000\000\
\\001\000\024\000\099\000\031\000\098\000\000\000\
\\001\000\024\000\132\000\000\000\
\\001\000\025\000\101\000\000\000\
\\001\000\026\000\075\000\000\000\
\\001\000\026\000\113\000\000\000\
\\001\000\026\000\135\000\000\000\
\\001\000\028\000\107\000\000\000\
\\001\000\028\000\146\000\000\000\
\\001\000\031\000\138\000\000\000\
\\001\000\031\000\149\000\037\000\148\000\000\000\
\\001\000\037\000\100\000\000\000\
\\001\000\037\000\110\000\000\000\
\\001\000\037\000\157\000\000\000\
\\001\000\044\000\000\000\000\000\
\\160\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\161\000\000\000\
\\162\000\000\000\
\\163\000\000\000\
\\164\000\024\000\028\000\000\000\
\\165\000\000\000\
\\166\000\000\000\
\\167\000\000\000\
\\168\000\000\000\
\\169\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\000\000\
\\173\000\000\000\
\\174\000\000\000\
\\175\000\000\000\
\\176\000\000\000\
\\177\000\000\000\
\\178\000\000\000\
\\179\000\001\000\027\000\002\000\026\000\003\000\025\000\005\000\024\000\
\\009\000\023\000\011\000\022\000\013\000\021\000\014\000\020\000\
\\020\000\019\000\025\000\018\000\036\000\017\000\000\000\
\\180\000\000\000\
\\181\000\021\000\040\000\022\000\039\000\023\000\038\000\033\000\077\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\182\000\000\000\
\\183\000\038\000\034\000\039\000\033\000\000\000\
\\184\000\000\000\
\\185\000\001\000\027\000\002\000\026\000\003\000\025\000\005\000\024\000\
\\009\000\023\000\011\000\022\000\013\000\021\000\014\000\020\000\
\\020\000\019\000\025\000\018\000\036\000\017\000\000\000\
\\186\000\000\000\
\\187\000\021\000\040\000\022\000\039\000\023\000\038\000\034\000\112\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\188\000\000\000\
\\189\000\038\000\034\000\039\000\033\000\000\000\
\\190\000\038\000\034\000\039\000\033\000\000\000\
\\191\000\000\000\
\\192\000\000\000\
\\199\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\200\000\000\000\
\\201\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\202\000\002\000\092\000\000\000\
\\203\000\000\000\
\\204\000\034\000\109\000\000\000\
\\205\000\000\000\
\\206\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\207\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\208\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\000\000\
\\209\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\000\000\
\\210\000\007\000\124\000\021\000\040\000\022\000\039\000\023\000\038\000\
\\035\000\037\000\036\000\036\000\037\000\035\000\038\000\034\000\
\\039\000\033\000\040\000\032\000\041\000\031\000\042\000\030\000\
\\043\000\029\000\000\000\
\\211\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\212\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\213\000\000\000\
\\214\000\010\000\054\000\018\000\053\000\019\000\052\000\000\000\
\\215\000\000\000\
\\216\000\018\000\053\000\000\000\
\\217\000\000\000\
\\218\000\010\000\054\000\000\000\
\\219\000\000\000\
\\220\000\000\000\
\\221\000\000\000\
\\222\000\000\000\
\\223\000\000\000\
\\224\000\000\000\
\\225\000\002\000\123\000\000\000\
\\226\000\000\000\
\\227\000\034\000\137\000\000\000\
\\228\000\000\000\
\\229\000\000\000\
\\230\000\000\000\
\\231\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\232\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\233\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\234\000\021\000\040\000\022\000\039\000\023\000\038\000\035\000\037\000\
\\036\000\036\000\037\000\035\000\038\000\034\000\039\000\033\000\
\\040\000\032\000\041\000\031\000\042\000\030\000\043\000\029\000\000\000\
\\235\000\000\000\
\\236\000\015\000\128\000\029\000\105\000\032\000\058\000\000\000\
\\236\000\025\000\061\000\027\000\060\000\029\000\059\000\032\000\058\000\000\000\
\\236\000\029\000\105\000\032\000\058\000\000\000\
\\237\000\000\000\
\\238\000\000\000\
\"
val actionRowNumbers =
"\000\000\058\000\050\000\054\000\
\\049\000\048\000\060\000\052\000\
\\056\000\057\000\059\000\044\000\
\\051\000\055\000\053\000\000\000\
\\063\000\000\000\045\000\022\000\
\\000\000\001\000\061\000\047\000\
\\115\000\046\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\067\000\
\\033\000\065\000\019\000\095\000\
\\094\000\097\000\096\000\107\000\
\\023\000\092\000\002\000\003\000\
\\004\000\025\000\029\000\113\000\
\\005\000\000\000\080\000\069\000\
\\084\000\087\000\086\000\013\000\
\\014\000\076\000\075\000\015\000\
\\074\000\073\000\018\000\017\000\
\\016\000\062\000\064\000\000\000\
\\000\000\098\000\108\000\063\000\
\\093\000\030\000\040\000\032\000\
\\000\000\000\000\116\000\027\000\
\\036\000\082\000\041\000\071\000\
\\034\000\065\000\089\000\021\000\
\\007\000\000\000\008\000\103\000\
\\088\000\026\000\118\000\000\000\
\\114\000\078\000\081\000\006\000\
\\000\000\070\000\000\000\068\000\
\\066\000\091\000\031\000\111\000\
\\103\000\024\000\099\000\035\000\
\\105\000\038\000\000\000\000\000\
\\028\000\117\000\000\000\082\000\
\\079\000\071\000\000\000\037\000\
\\010\000\039\000\104\000\009\000\
\\011\000\085\000\020\000\116\000\
\\077\000\083\000\072\000\112\000\
\\101\000\100\000\000\000\012\000\
\\105\000\102\000\000\000\109\000\
\\042\000\106\000\090\000\000\000\
\\110\000\043\000"
val gotoT =
"\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\011\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\027\000\157\000\
\\028\000\003\000\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\039\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\041\000\
\\009\000\040\000\017\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\023\000\006\000\024\000\005\000\026\000\004\000\
\\028\000\003\000\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\042\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\006\000\049\000\007\000\048\000\018\000\047\000\019\000\046\000\
\\030\000\045\000\031\000\044\000\032\000\043\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\053\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\055\000\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\060\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\061\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\062\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\063\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\064\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\065\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\066\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\067\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\068\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\069\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\070\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\071\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\072\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\010\000\074\000\000\000\
\\000\000\
\\000\000\
\\030\000\077\000\000\000\
\\000\000\
\\018\000\078\000\000\000\
\\000\000\
\\000\000\
\\006\000\049\000\007\000\080\000\018\000\047\000\019\000\046\000\
\\030\000\045\000\031\000\044\000\032\000\043\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\087\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\011\000\089\000\012\000\088\000\000\000\
\\001\000\092\000\003\000\014\000\004\000\013\000\005\000\012\000\
\\008\000\091\000\017\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\023\000\006\000\024\000\005\000\026\000\004\000\
\\028\000\003\000\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\093\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\094\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\041\000\
\\009\000\095\000\017\000\010\000\020\000\009\000\021\000\008\000\
\\022\000\007\000\023\000\006\000\024\000\005\000\026\000\004\000\
\\028\000\003\000\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\100\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\101\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\025\000\102\000\000\000\
\\000\000\
\\000\000\
\\013\000\106\000\000\000\
\\000\000\
\\002\000\109\000\000\000\
\\000\000\
\\010\000\112\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\115\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\014\000\120\000\015\000\119\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\124\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\025\000\125\000\000\000\
\\000\000\
\\000\000\
\\011\000\127\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\128\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\129\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\120\000\015\000\131\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\016\000\134\000\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\137\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\138\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\140\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\013\000\141\000\000\000\
\\000\000\
\\002\000\142\000\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\143\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\014\000\148\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\025\000\125\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\151\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\016\000\153\000\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\154\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\014\000\004\000\013\000\005\000\012\000\008\000\156\000\
\\017\000\010\000\020\000\009\000\021\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\026\000\004\000\028\000\003\000\
\\029\000\002\000\033\000\001\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 158
val numrules = 79
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit | STRING of  (string)
 | ID of  (string) | INTEGER of  (int)
 | whileExp of  ({ test:A.exp,body:A.exp,pos:A.pos } )
 | varDec of  ({ name:A.symbol,escape:bool ref,typ: ( S.symbol * A.pos )  option,init:A.exp,pos:A.pos } )
 | tyDecs of  ({ name:S.symbol,ty:A.ty,pos:A.pos }  list)
 | tyDec of  ({ name:S.symbol,ty:A.ty,pos:A.pos } )
 | seqExp of  ( ( A.exp * A.pos )  list)
 | recCreate of  ({ fields: ( S.symbol * A.exp * A.pos )  list,typ:S.symbol,pos:A.pos } )
 | program of  (A.exp)
 | negation of  ({ left:A.exp,oper:A.oper,right:A.exp,pos:A.pos } )
 | lValueTail of  (lValueVar list) | lValue of  (A.var)
 | letExp of  ({ decs:A.dec list,body:A.exp,pos:A.pos } )
 | infixExp of  ({ left:A.exp,oper:A.oper,right:A.exp,pos:A.pos } )
 | ifThenElse of  ({ test:A.exp,then':A.exp,else':A.exp option,pos:A.pos } )
 | ifThen of  ({ test:A.exp,then':A.exp,else':A.exp option,pos:A.pos } )
 | funDecs of  (A.fundec list) | funDec of  (A.fundec)
 | forExp of  ({ var:S.symbol,escape:bool ref,lo:A.exp,hi:A.exp,body:A.exp,pos:A.pos } )
 | fldDecList of  (A.field list) | fldDec of  (A.field list)
 | fldD of  ({ name:S.symbol,escape:bool ref,typ:S.symbol,pos:A.pos } )
 | fldCreatTail of  ( ( S.symbol * A.exp * A.pos )  list)
 | fldCreat of  ( ( S.symbol * A.exp * A.pos )  list)
 | fldC of  ( ( S.symbol * A.exp * A.pos ) )
 | expListTail of  ( ( A.exp * A.pos )  list)
 | expList of  ( ( A.exp * A.pos )  list) | exp of  (A.exp)
 | decList of  (A.dec list) | dec of  (A.dec)
 | callExp of  ({ func:S.symbol,args:A.exp list,pos:A.pos } )
 | assignment of  ({ var:A.var,exp:A.exp,pos:A.pos } )
 | arrCreate of  ({ typ:S.symbol,size:A.exp,init:A.exp,pos:A.pos } )
 | argListTail of  (A.exp list) | argList of  (A.exp list)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 3) => true | (T 4) => true | (T 5) => true | (T 6) => true | (T 
7) => true | (T 8) => true | (T 9) => true | (T 10) => true | (T 11)
 => true | (T 12) => true | (T 13) => true | (T 14) => true | (T 15)
 => true | (T 16) => true | (T 17) => true | (T 18) => true | (T 19)
 => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
 $$ (T 36),nil
 $$ (T 23))::
(nil
 $$ (T 23),nil
 $$ (T 36))::
(nil
 $$ (T 6) $$ (T 32),nil
 $$ (T 6))::
(nil
 $$ (T 33),nil
 $$ (T 32))::
(nil
 $$ (T 32),nil
 $$ (T 33))::
(nil
,nil
 $$ (T 24))::
(nil
,nil
 $$ (T 6))::
(nil
,nil
 $$ (T 15))::
(nil
,nil
 $$ (T 7) $$ (T 0) $$ (T 11))::
nil
val noShift = 
fn (T 43) => true | _ => false
val showTerminal =
fn (T 0) => "INTEGER"
  | (T 1) => "ID"
  | (T 2) => "STRING"
  | (T 3) => "ARRAY"
  | (T 4) => "BREAK"
  | (T 5) => "DO"
  | (T 6) => "ELSE"
  | (T 7) => "END"
  | (T 8) => "FOR"
  | (T 9) => "FUNCTION"
  | (T 10) => "IF"
  | (T 11) => "IN"
  | (T 12) => "LET"
  | (T 13) => "NIL"
  | (T 14) => "OF"
  | (T 15) => "THEN"
  | (T 16) => "TO"
  | (T 17) => "TYPE"
  | (T 18) => "VAR"
  | (T 19) => "WHILE"
  | (T 20) => "NOTEQUAL"
  | (T 21) => "LESSEQUAL"
  | (T 22) => "GREATEREQUAL"
  | (T 23) => "ASSIGN"
  | (T 24) => "LPAREN"
  | (T 25) => "RPAREN"
  | (T 26) => "LBRACES"
  | (T 27) => "RBRACES"
  | (T 28) => "LBRACKETS"
  | (T 29) => "RBRACKETS"
  | (T 30) => "COLON"
  | (T 31) => "DOT"
  | (T 32) => "SEMICOLON"
  | (T 33) => "COMMA"
  | (T 34) => "PLUS"
  | (T 35) => "MINUS"
  | (T 36) => "EQUALS"
  | (T 37) => "MULTIPLY"
  | (T 38) => "DIVIDE"
  | (T 39) => "LESS"
  | (T 40) => "GREATER"
  | (T 41) => "AND"
  | (T 42) => "OR"
  | (T 43) => "EOF"
  | (T 44) => "LOWPREC"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(( "bogus" )) | 
(T 0) => MlyValue.INTEGER(( 1 )) | 
(T 2) => MlyValue.STRING(( "" )) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38)
 $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31)
 $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24)
 $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17)
 $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10)
 $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 3)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp, exp1left, exp1right)) :: rest671))
 => let val  result = MlyValue.program ( exp )
 in ( LrTable.NT 26, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp ( A.NilExp )
 in ( LrTable.NT 7, ( result, NIL1left, NIL1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.INTEGER INTEGER, INTEGER1left, INTEGER1right
)) :: rest671)) => let val  result = MlyValue.exp ( A.IntExp INTEGER )
 in ( LrTable.NT 7, ( result, INTEGER1left, INTEGER1right), rest671)

end
|  ( 3, ( ( _, ( MlyValue.STRING STRING, (STRINGleft as STRING1left), 
STRING1right)) :: rest671)) => let val  result = MlyValue.exp (
 A.StringExp (STRING, STRINGleft) )
 in ( LrTable.NT 7, ( result, STRING1left, STRING1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.lValue lValue, lValue1left, lValue1right))
 :: rest671)) => let val  result = MlyValue.exp ( A.VarExp lValue )
 in ( LrTable.NT 7, ( result, lValue1left, lValue1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.negation negation, negation1left, 
negation1right)) :: rest671)) => let val  result = MlyValue.exp (
 A.OpExp negation )
 in ( LrTable.NT 7, ( result, negation1left, negation1right), rest671)

end
|  ( 6, ( ( _, ( MlyValue.seqExp seqExp, seqExp1left, seqExp1right))
 :: rest671)) => let val  result = MlyValue.exp ( A.SeqExp seqExp )
 in ( LrTable.NT 7, ( result, seqExp1left, seqExp1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.callExp callExp, callExp1left, callExp1right
)) :: rest671)) => let val  result = MlyValue.exp ( A.CallExp callExp 
)
 in ( LrTable.NT 7, ( result, callExp1left, callExp1right), rest671)

end
|  ( 8, ( ( _, ( MlyValue.infixExp infixExp, infixExp1left, 
infixExp1right)) :: rest671)) => let val  result = MlyValue.exp (
 A.OpExp infixExp )
 in ( LrTable.NT 7, ( result, infixExp1left, infixExp1right), rest671)

end
|  ( 9, ( ( _, ( MlyValue.arrCreate arrCreate, arrCreate1left, 
arrCreate1right)) :: rest671)) => let val  result = MlyValue.exp (
 A.ArrayExp arrCreate )
 in ( LrTable.NT 7, ( result, arrCreate1left, arrCreate1right), 
rest671)
end
|  ( 10, ( ( _, ( MlyValue.recCreate recCreate, recCreate1left, 
recCreate1right)) :: rest671)) => let val  result = MlyValue.exp (
 A.RecordExp recCreate )
 in ( LrTable.NT 7, ( result, recCreate1left, recCreate1right), 
rest671)
end
|  ( 11, ( ( _, ( MlyValue.assignment assignment, assignment1left, 
assignment1right)) :: rest671)) => let val  result = MlyValue.exp (
 A.AssignExp assignment )
 in ( LrTable.NT 7, ( result, assignment1left, assignment1right), 
rest671)
end
|  ( 12, ( ( _, ( MlyValue.ifThenElse ifThenElse, ifThenElse1left, 
ifThenElse1right)) :: rest671)) => let val  result = MlyValue.exp (
 A.IfExp ifThenElse )
 in ( LrTable.NT 7, ( result, ifThenElse1left, ifThenElse1right), 
rest671)
end
|  ( 13, ( ( _, ( MlyValue.ifThen ifThen, ifThen1left, ifThen1right))
 :: rest671)) => let val  result = MlyValue.exp ( A.IfExp ifThen )
 in ( LrTable.NT 7, ( result, ifThen1left, ifThen1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.whileExp whileExp, whileExp1left, 
whileExp1right)) :: rest671)) => let val  result = MlyValue.exp (
 A.WhileExp whileExp )
 in ( LrTable.NT 7, ( result, whileExp1left, whileExp1right), rest671)

end
|  ( 15, ( ( _, ( MlyValue.forExp forExp, forExp1left, forExp1right))
 :: rest671)) => let val  result = MlyValue.exp ( A.ForExp forExp )
 in ( LrTable.NT 7, ( result, forExp1left, forExp1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.letExp letExp, letExp1left, letExp1right))
 :: rest671)) => let val  result = MlyValue.exp ( A.LetExp letExp )
 in ( LrTable.NT 7, ( result, letExp1left, letExp1right), rest671)
end
|  ( 17, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.exp ( A.BreakExp BREAKleft)
 in ( LrTable.NT 7, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 18, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.expList 
expList, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let val 
 result = MlyValue.seqExp ( expList )
 in ( LrTable.NT 28, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 19, ( rest671)) => let val  result = MlyValue.expList ( [] )
 in ( LrTable.NT 8, ( result, defaultPos, defaultPos), rest671)
end
|  ( 20, ( ( _, ( MlyValue.expListTail expListTail, _, 
expListTail1right)) :: ( _, ( MlyValue.exp exp, (expleft as exp1left),
 _)) :: rest671)) => let val  result = MlyValue.expList (
 (exp, expleft) :: expListTail )
 in ( LrTable.NT 8, ( result, exp1left, expListTail1right), rest671)

end
|  ( 21, ( rest671)) => let val  result = MlyValue.expListTail ( [] )
 in ( LrTable.NT 9, ( result, defaultPos, defaultPos), rest671)
end
|  ( 22, ( ( _, ( MlyValue.expListTail expListTail, _, 
expListTail1right)) :: ( _, ( MlyValue.exp exp, expleft, _)) :: ( _, (
 _, SEMICOLON1left, _)) :: rest671)) => let val  result = 
MlyValue.expListTail ( (exp, expleft) :: expListTail )
 in ( LrTable.NT 9, ( result, SEMICOLON1left, expListTail1right), 
rest671)
end
|  ( 23, ( ( _, ( MlyValue.exp exp, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.negation (
 { left = A.IntExp 0, oper = A.MinusOp, right = exp, pos = MINUSleft} 
)
 in ( LrTable.NT 25, ( result, MINUS1left, exp1right), rest671)
end
|  ( 24, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.argList 
argList, _, _)) :: _ :: ( _, ( MlyValue.ID ID, (IDleft as ID1left), _)
) :: rest671)) => let val  result = MlyValue.callExp (
 { func = Symbol.symbol ID, args = argList, pos = IDleft } )
 in ( LrTable.NT 4, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 25, ( rest671)) => let val  result = MlyValue.argList ( [] )
 in ( LrTable.NT 0, ( result, defaultPos, defaultPos), rest671)
end
|  ( 26, ( ( _, ( MlyValue.argListTail argListTail, _, 
argListTail1right)) :: ( _, ( MlyValue.exp exp, exp1left, _)) :: 
rest671)) => let val  result = MlyValue.argList ( exp :: argListTail )
 in ( LrTable.NT 0, ( result, exp1left, argListTail1right), rest671)

end
|  ( 27, ( rest671)) => let val  result = MlyValue.argListTail ( [] )
 in ( LrTable.NT 1, ( result, defaultPos, defaultPos), rest671)
end
|  ( 28, ( ( _, ( MlyValue.argListTail argListTail, _, 
argListTail1right)) :: ( _, ( MlyValue.exp exp, _, _)) :: ( _, ( _, 
COMMA1left, _)) :: rest671)) => let val  result = MlyValue.argListTail
 ( exp :: argListTail )
 in ( LrTable.NT 1, ( result, COMMA1left, argListTail1right), rest671)

end
|  ( 29, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
PLUSleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.PlusOp, right = exp2, pos = PLUSleft } )
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
MINUSleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.MinusOp, right = exp2, pos = MINUSleft } )
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 31, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
MULTIPLYleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: 
rest671)) => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.DivideOp, right = exp2, pos = MULTIPLYleft } 
)
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
DIVIDEleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)
) => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.TimesOp, right = exp2, pos = DIVIDEleft } )
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
GREATERleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671
)) => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.GtOp, right = exp2, pos = GREATERleft } )
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
LESSleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.LtOp, right = exp2, pos = LESSleft } )
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
EQUALSleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)
) => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.EqOp, right = exp2, pos = EQUALSleft } )
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 36, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
NOTEQUALleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: 
rest671)) => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.NeqOp, right = exp2, pos = NOTEQUALleft } )
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 37, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
LESSEQUALleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: 
rest671)) => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.LeOp, right = exp2, pos = LESSEQUALleft } )
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
GREATEREQUALleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: 
rest671)) => let val  result = MlyValue.infixExp (
 { left = exp1, oper = A.GeOp, right = exp2, pos = GREATEREQUALleft } 
)
 in ( LrTable.NT 21, ( result, exp1left, exp2right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID, (IDleft as 
ID1left), _)) :: rest671)) => let val  result = MlyValue.arrCreate (
 { typ = S.symbol ID, size = exp1, init = exp2, pos = IDleft } )
 in ( LrTable.NT 2, ( result, ID1left, exp2right), rest671)
end
|  ( 40, ( ( _, ( _, _, RBRACES1right)) :: ( _, ( MlyValue.fldCreat 
fldCreat, _, _)) :: _ :: ( _, ( MlyValue.ID ID, (IDleft as ID1left), _
)) :: rest671)) => let val  result = MlyValue.recCreate (
 { fields = fldCreat, typ = S.symbol ID, pos = IDleft } )
 in ( LrTable.NT 27, ( result, ID1left, RBRACES1right), rest671)
end
|  ( 41, ( ( _, ( MlyValue.exp exp, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.fldC ( (S.symbol ID, exp, IDleft) )
 in ( LrTable.NT 10, ( result, ID1left, exp1right), rest671)
end
|  ( 42, ( rest671)) => let val  result = MlyValue.fldCreat ( [] )
 in ( LrTable.NT 11, ( result, defaultPos, defaultPos), rest671)
end
|  ( 43, ( ( _, ( MlyValue.fldCreatTail fldCreatTail, _, 
fldCreatTail1right)) :: ( _, ( MlyValue.fldC fldC, fldC1left, _)) :: 
rest671)) => let val  result = MlyValue.fldCreat (
 fldC :: fldCreatTail )
 in ( LrTable.NT 11, ( result, fldC1left, fldCreatTail1right), rest671
)
end
|  ( 44, ( rest671)) => let val  result = MlyValue.fldCreatTail ( [] )
 in ( LrTable.NT 12, ( result, defaultPos, defaultPos), rest671)
end
|  ( 45, ( ( _, ( MlyValue.fldCreatTail fldCreatTail, _, 
fldCreatTail1right)) :: ( _, ( MlyValue.fldC fldC, _, _)) :: ( _, ( _,
 COMMA1left, _)) :: rest671)) => let val  result = 
MlyValue.fldCreatTail ( fldC :: fldCreatTail )
 in ( LrTable.NT 12, ( result, COMMA1left, fldCreatTail1right), 
rest671)
end
|  ( 46, ( ( _, ( MlyValue.exp exp, _, exp1right)) :: ( _, ( _, 
ASSIGNleft, _)) :: ( _, ( MlyValue.lValue lValue, lValue1left, _)) :: 
rest671)) => let val  result = MlyValue.assignment (
 { var = lValue, exp = exp, pos = ASSIGNleft } )
 in ( LrTable.NT 3, ( result, lValue1left, exp1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.ifThenElse (
 { test = exp1, then' = exp2, else' = SOME exp3, pos = IFleft } )
 in ( LrTable.NT 20, ( result, IF1left, exp3right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
ANDleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671))
 => let val  result = MlyValue.ifThenElse (
 { test = exp1, then' = exp2, else' = SOME (A.IntExp 0), pos = ANDleft } 
)
 in ( LrTable.NT 20, ( result, exp1left, exp2right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: ( _, ( _, 
ORleft, _)) :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.ifThenElse (
 { test = exp1, then' = A.IntExp 1, else' = SOME exp2, pos = ORleft } 
)
 in ( LrTable.NT 20, ( result, exp1left, exp2right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.ifThen (
 { test = exp1, then' = exp2, else' = NONE, pos = IFleft } )
 in ( LrTable.NT 19, ( result, IF1left, exp2right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.whileExp (
 { test = exp1, body = exp2, pos = WHILEleft } )
 in ( LrTable.NT 32, ( result, WHILE1left, exp2right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID, _, _)) :: ( _, ( _, (FORleft as FOR1left)
, _)) :: rest671)) => let val  result = MlyValue.forExp (
 { var = S.symbol ID, escape = ref true, lo = exp1, hi = exp2, body = exp3, pos = FORleft } 
)
 in ( LrTable.NT 16, ( result, FOR1left, exp3right), rest671)
end
|  ( 53, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.expList expList
, _, _)) :: _ :: ( _, ( MlyValue.decList decList, _, _)) :: ( _, ( _,
 (LETleft as LET1left), _)) :: rest671)) => let val  result = 
MlyValue.letExp (
 { decs = decList, body = A.SeqExp expList, pos = LETleft } )
 in ( LrTable.NT 22, ( result, LET1left, END1right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.dec dec, dec1left, dec1right)) :: rest671))
 => let val  result = MlyValue.decList ( [dec] )
 in ( LrTable.NT 6, ( result, dec1left, dec1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.decList decList, _, decList1right)) :: ( _,
 ( MlyValue.dec dec, dec1left, _)) :: rest671)) => let val  result = 
MlyValue.decList ( dec :: decList )
 in ( LrTable.NT 6, ( result, dec1left, decList1right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.tyDecs tyDecs, tyDecs1left, tyDecs1right))
 :: rest671)) => let val  result = MlyValue.dec ( A.TypeDec tyDecs )
 in ( LrTable.NT 5, ( result, tyDecs1left, tyDecs1right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.varDec varDec, varDec1left, varDec1right))
 :: rest671)) => let val  result = MlyValue.dec ( A.VarDec varDec )
 in ( LrTable.NT 5, ( result, varDec1left, varDec1right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.funDecs funDecs, funDecs1left, 
funDecs1right)) :: rest671)) => let val  result = MlyValue.dec (
 A.FunctionDec funDecs )
 in ( LrTable.NT 5, ( result, funDecs1left, funDecs1right), rest671)

end
|  ( 59, ( ( _, ( MlyValue.tyDec tyDec, tyDec1left, tyDec1right)) :: 
rest671)) => let val  result = MlyValue.tyDecs ( [tyDec] )
 in ( LrTable.NT 30, ( result, tyDec1left, tyDec1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.tyDec tyDec, _, tyDec1right)) :: ( _, ( 
MlyValue.tyDecs tyDecs, tyDecs1left, _)) :: rest671)) => let val  
result = MlyValue.tyDecs ( tyDecs @ [tyDec] )
 in ( LrTable.NT 30, ( result, tyDecs1left, tyDec1right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.ID ID2, ID2left, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.tyDec (
 { name = S.symbol ID1, ty = A.NameTy (S.symbol ID2, ID2left), pos = TYPEleft } 
)
 in ( LrTable.NT 29, ( result, TYPE1left, ID2right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.ID ID2, ID2left, ID2right)) :: _ :: _ :: _
 :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left
), _)) :: rest671)) => let val  result = MlyValue.tyDec (
 { name = S.symbol ID1, ty = A.ArrayTy (S.symbol ID2, ID2left), pos = TYPEleft } 
)
 in ( LrTable.NT 29, ( result, TYPE1left, ID2right), rest671)
end
|  ( 63, ( ( _, ( _, _, RBRACES1right)) :: ( _, ( MlyValue.fldDec 
fldDec, _, _)) :: _ :: _ :: ( _, ( MlyValue.ID ID, _, _)) :: ( _, ( _,
 (TYPEleft as TYPE1left), _)) :: rest671)) => let val  result = 
MlyValue.tyDec (
 { name = S.symbol ID, ty = A.RecordTy fldDec, pos = TYPEleft } )
 in ( LrTable.NT 29, ( result, TYPE1left, RBRACES1right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.fldD (
 { name = S.symbol ID1, escape = ref true, typ = S.symbol ID2, pos = ID1left } 
)
 in ( LrTable.NT 13, ( result, ID1left, ID2right), rest671)
end
|  ( 65, ( rest671)) => let val  result = MlyValue.fldDec ( [] )
 in ( LrTable.NT 14, ( result, defaultPos, defaultPos), rest671)
end
|  ( 66, ( ( _, ( MlyValue.fldDecList fldDecList, _, fldDecList1right)
) :: ( _, ( MlyValue.fldD fldD, fldD1left, _)) :: rest671)) => let
 val  result = MlyValue.fldDec ( fldD :: fldDecList )
 in ( LrTable.NT 14, ( result, fldD1left, fldDecList1right), rest671)

end
|  ( 67, ( rest671)) => let val  result = MlyValue.fldDecList ( [] )
 in ( LrTable.NT 15, ( result, defaultPos, defaultPos), rest671)
end
|  ( 68, ( ( _, ( MlyValue.fldDecList fldDecList, _, fldDecList1right)
) :: ( _, ( MlyValue.fldD fldD, _, _)) :: ( _, ( _, COMMA1left, _)) ::
 rest671)) => let val  result = MlyValue.fldDecList (
 fldD :: fldDecList )
 in ( LrTable.NT 15, ( result, COMMA1left, fldDecList1right), rest671)

end
|  ( 69, ( ( _, ( MlyValue.funDec funDec, funDec1left, funDec1right))
 :: rest671)) => let val  result = MlyValue.funDecs ( [funDec] )
 in ( LrTable.NT 18, ( result, funDec1left, funDec1right), rest671)

end
|  ( 70, ( ( _, ( MlyValue.funDec funDec, _, funDec1right)) :: ( _, ( 
MlyValue.funDecs funDecs, funDecs1left, _)) :: rest671)) => let val  
result = MlyValue.funDecs ( funDecs @ [funDec] )
 in ( LrTable.NT 18, ( result, funDecs1left, funDec1right), rest671)

end
|  ( 71, ( ( _, ( MlyValue.exp exp, _, exp1right)) :: _ :: _ :: ( _, (
 MlyValue.fldDec fldDec, _, _)) :: _ :: ( _, ( MlyValue.ID ID, _, _))
 :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let
 val  result = MlyValue.funDec (
 { name = S.symbol ID, params = fldDec, result = NONE, body = exp, pos = FUNCTIONleft } 
)
 in ( LrTable.NT 17, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 72, ( ( _, ( MlyValue.exp exp, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.fldDec 
fldDec, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (
FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let val  result = 
MlyValue.funDec (
 { name = S.symbol ID1, params = fldDec, result = SOME (S.symbol ID2, ID2left), body = exp, pos = FUNCTIONleft } 
)
 in ( LrTable.NT 17, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 73, ( ( _, ( MlyValue.exp exp, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID, _, _)) :: ( _, ( _, (VARleft as VAR1left), _)) :: 
rest671)) => let val  result = MlyValue.varDec (
 { name = S.symbol ID, escape = ref true, typ = NONE, init = exp, pos = VARleft } 
)
 in ( LrTable.NT 31, ( result, VAR1left, exp1right), rest671)
end
|  ( 74, ( ( _, ( MlyValue.exp exp, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.varDec (
 { name = S.symbol ID1, escape = ref true, typ = SOME (S.symbol ID2, ID2left), init = exp, pos = VARleft } 
)
 in ( LrTable.NT 31, ( result, VAR1left, exp1right), rest671)
end
|  ( 75, ( ( _, ( MlyValue.lValueTail lValueTail, _, lValueTail1right)
) :: ( _, ( MlyValue.ID ID, (IDleft as ID1left), _)) :: rest671)) =>
 let val  result = MlyValue.lValue (
 makeLvalueVar (A.SimpleVar (S.symbol ID, IDleft), IDleft, lValueTail) 
)
 in ( LrTable.NT 23, ( result, ID1left, lValueTail1right), rest671)

end
|  ( 76, ( rest671)) => let val  result = MlyValue.lValueTail ( [] )
 in ( LrTable.NT 24, ( result, defaultPos, defaultPos), rest671)
end
|  ( 77, ( ( _, ( MlyValue.lValueTail lValueTail, _, lValueTail1right)
) :: _ :: ( _, ( MlyValue.exp exp, _, _)) :: ( _, ( _, LBRACKETS1left,
 _)) :: rest671)) => let val  result = MlyValue.lValueTail (
 (Subscript exp) :: lValueTail )
 in ( LrTable.NT 24, ( result, LBRACKETS1left, lValueTail1right), 
rest671)
end
|  ( 78, ( ( _, ( MlyValue.lValueTail lValueTail, _, lValueTail1right)
) :: ( _, ( MlyValue.ID ID, _, _)) :: ( _, ( _, DOT1left, _)) :: 
rest671)) => let val  result = MlyValue.lValueTail (
 Field (S.symbol ID) :: lValueTail )
 in ( LrTable.NT 24, ( result, DOT1left, lValueTail1right), rest671)

end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a 
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun INTEGER (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.INTEGER i,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID i,p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.STRING i,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun NOTEQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LESSEQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun GREATEREQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACKETS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACKETS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUALS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun MULTIPLY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun LESS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun GREATER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun LOWPREC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
end
end
