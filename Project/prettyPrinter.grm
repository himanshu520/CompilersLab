(* This is the preamble where we can have arbitrary sml code. For us
it is empty *)

%%

(* Name of the parser *)
%name Tiger

(* Produces verbose description of the generated LALR parser *)
%verbose

(* type to capture the position of a token within a file *)
%pos int

(* The terminals or tokens of the language.
   Similar to ML datatype declaration.
   The terminals with no datatype have no value associated with them *)
%term INTEGER of int
    | ID of string
    | TYID of string
    | STRING of string
    | COMMENT of string
    | ARRAY
    | BREAK
    | DO
    | ELSE
    | END
    | FOR
    | FUNCTION
    | IF
    | IN
    | LET
    | NIL
    | OF
    | THEN
    | TO
    | TYPE
    | VAR
    | WHILE
    | NOTEQUAL
    | LESSEQUAL
    | GREATEREQUAL
    | ASSIGN
    | LPAREN
    | RPAREN
    | LBRACES
    | RBRACES
    | LBRACKETS
    | RBRACKETS
    | COLON
    | DOT
    | SEMICOLON
    | COMMA
    | PLUS
    | MINUS
    | UMINUS
    | EQUALS
    | MULTIPLY
    | DIVIDE 
    | LESS
    | GREATER
    | AND
    | OR
    | EOF
    
(* The nonterminals or symbols of the language.
   The types for the nonterminals are the correspoding abstract syntax used to capture the semantic 
   meaning of the values associated with the nonterminal *)
%nonterm argList
       | argListTail
       | arrCreate
       | arrTy
       | assignment
       | callExp
       | dec
       | decList
       | exp
       | expList 
       | expListTail 
       | fldC
       | fldCreat
       | fldCreatTail
       | fldD
       | fldDec
       | fldDecList
       | forExp
       | funDec
       | ifThen
       | ifThenElse
       | infixExp
       | letExp
       | lValue
       | negation
       | program
       | recCreate
       | recTy
       | seqExp
       | ty
       | tyDec
       | varDec
       | whileExp


%eop EOF                (* the set of terminals that may follow the start symbol *)
%pure                   (* the semantic actions are free of significant side-effects and always terminate *)
%noshift EOF            (* non-shiftable terminals *)
%arg (fileName) : string

(* Specifying the keywords *)
%keyword ARRAY BREAK DO ELSE END FOR FUNCTION IF IN LET NIL OF THEN TO TYPE VAR WHILE

(*  *)
%prefer THEN ELSE LPAREN

(* Specifying the precedence and associativity of operators *)
%nonassoc FUNCTION VAR TYPE THEN DO OF
%right ELSE
%nonassoc ASSIGN
%left OR
%left AND 
%nonassoc GREATEREQUAL LESSEQUAL EQUALS NOTEQUAL LESS GREATER
%left PLUS MINUS
%left MULTIPLY DIVIDE
%left UMINUS

%%

(* The grammar associated with our program *)
program     : exp                               ()


exp         : NIL                               ()
            | INTEGER                               ()
            | STRING                                ()
            | lValue                                ()
            | negation                              ()
            | seqExp                                ()
            | callExp                               ()
            | infixExp                              ()
            | arrCreate                             ()
            | recCreate                             ()
            | assignment                                ()
            | ifThenElse                                ()
            | ifThen                                ()
            | whileExp                              ()
            | forExp                                ()
            | letExp                                ()
            | BREAK                             ()


seqExp      : LPAREN expList RPAREN                             ()
expList     :                               ()
            | exp expListTail                               ()
expListTail :                               ()
            | SEMICOLON exp expListTail                             ()


negation    : MINUS exp                              ()


callExp     : ID LPAREN argList RPAREN                               ()
argList     :                               ()
            | exp argListTail                                ()
argListTail :                               ()
            | COMMA exp argListTail                              ()


infixExp    : exp PLUS exp                               ()
            | exp MINUS exp                             ()
            | exp MULTIPLY exp                              ()
            | exp DIVIDE exp                                ()
            | exp GREATER exp                               ()
            | exp LESS exp                              ()
            | exp EQUALS exp                                ()
            | exp NOTEQUAL exp                              ()
            | exp LESSEQUAL exp                             ()
            | exp GREATEREQUAL exp                              ()
            | exp AND exp                               ()
            | exp OR exp                                ()

arrCreate   : TYID LBRACKETS exp RBRACKETS OF exp                               ()


recCreate   : TYID LBRACES fldCreat RBRACES                             ()
fldC        : ID EQUALS exp                               ()
fldCreat    :                               ()
            | fldC fldCreatTail                              ()
fldCreatTail:                               ()
            | COMMA fldC fldCreatTail                               ()


assignment  : lValue ASSIGN exp                             ()


ifThenElse  : IF exp THEN exp ELSE exp                              ()
ifThen      : IF exp THEN exp                               ()


whileExp    : WHILE exp DO exp                              ()
forExp      : FOR ID ASSIGN exp TO exp DO exp                               ()


letExp      : LET decList IN expList END                                ()
decList     : dec                               ()
            | dec decList                               ()


dec         : tyDec                             ()
            | varDec                                ()
            | funDec                                ()


tyDec       : TYPE TYID EQUALS ty                               ()
ty          : TYID                              ()
            | arrTy                             ()
            | recTy                             ()
arrTy       : ARRAY OF TYID                             ()
recTy       : LBRACES fldDec RBRACES                                ()
fldD        : ID COLON TYID                             ()
fldDec      :                               ()
            | fldD fldDecList                               ()
fldDecList  :                               ()
            | COMMA fldD fldDecList                              ()


funDec      : FUNCTION ID LPAREN fldDec RPAREN EQUALS exp                               ()
            | FUNCTION ID LPAREN fldDec RPAREN COLON TYID EQUALS exp                                ()


varDec      : VAR ID ASSIGN exp                             ()
            | VAR ID COLON TYID ASSIGN exp                              ()


lValue      : ID                                ()
            | lValue LBRACKETS exp RBRACKETS                                ()
            | lValue DOT ID                             ()
