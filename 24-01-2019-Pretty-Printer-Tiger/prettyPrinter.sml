(* This file provides glue code for building the pretty printer using the parser and lexer specified 
   in prettyPrinter.lex and prettyPrinter.grm. *)

(* Creating the lexer and parser for our grammar using functors generated by ML-Lex and ML-Yacc
    from the descriptions provided in the corresponding .lex and .grm files *)
structure PrettyPrinterLrVals =
    PrettyPrinterLrValsFun ( structure Token = LrParser.Token )
structure PrettyPrinterLex = 
    PrettyPrinterLexFun ( structure Tokens = PrettyPrinterLrVals.Tokens )
structure PrettyPrinterParser =
    JoinWithArg ( structure ParserData = PrettyPrinterLrVals.ParserData
                  structure Lex = PrettyPrinterLex
                  structure LrParser = LrParser )

structure PrettyPrinter = struct
    
    exception PrettyPrinterError;
    
    fun prettyPrint fileName =
        let val inStream = TextIO.openIn fileName;
            fun grab n = if TextIO.endOfStream inStream then "" else TextIO.inputN (inStream, n);
            fun printError (msg, line, col) = print (fileName ^ "[" ^ Int.toString line ^ ":" 
                                                  ^ Int.toString col ^ "] " ^ msg ^ "\n");
            val (tree, rem) = PrettyPrinterParser.parse (15, (PrettyPrinterParser.makeLexer grab fileName), printError, fileName)
            handle PrettyPrinterParser.ParseError => raise PrettyPrinterError;
            (* Close the source program file *)
            val _ = TextIO.closeIn inStream;
        in tree end

end;