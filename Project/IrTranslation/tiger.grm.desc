
state 0:

	program : . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 11
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	program	goto 157
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 1:

	exp : whileExp .  (reduce by rule 14)



	.	reduce by rule 14


state 2:

	exp : seqExp .  (reduce by rule 6)



	.	reduce by rule 6


state 3:

	exp : recCreate .  (reduce by rule 10)



	.	reduce by rule 10


state 4:

	exp : negation .  (reduce by rule 5)



	.	reduce by rule 5


state 5:

	assignment : lValue . ASSIGN exp 
	exp : lValue .  (reduce by rule 4)

	ASSIGN	shift 26


	.	reduce by rule 4


state 6:

	exp : letExp .  (reduce by rule 16)



	.	reduce by rule 16


state 7:

	exp : infixExp .  (reduce by rule 8)



	.	reduce by rule 8


state 8:

	exp : ifThenElse .  (reduce by rule 12)



	.	reduce by rule 12


state 9:

	exp : ifThen .  (reduce by rule 13)



	.	reduce by rule 13


state 10:

	exp : forExp .  (reduce by rule 15)



	.	reduce by rule 15


state 11:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	program : exp .  (reduce by rule 0)

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 0


state 12:

	exp : callExp .  (reduce by rule 7)



	.	reduce by rule 7


state 13:

	exp : assignment .  (reduce by rule 11)



	.	reduce by rule 11


state 14:

	exp : arrCreate .  (reduce by rule 9)



	.	reduce by rule 9


state 15:

	negation : MINUS . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 39
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 16:

	seqExp : LPAREN . expList RPAREN 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 41
	expList	goto 40
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	reduce by rule 19


state 17:

	whileExp : WHILE . exp DO exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 42
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 18:

	exp : NIL .  (reduce by rule 1)



	.	reduce by rule 1


state 19:

	letExp : LET . decList IN expList END 

	FUNCTION	shift 52
	TYPE	shift 51
	VAR	shift 50

	dec	goto 49
	decList	goto 48
	funDec	goto 47
	funDecs	goto 46
	tyDec	goto 45
	tyDecs	goto 44
	varDec	goto 43

	.	error


state 20:

	ifThen : IF . exp THEN exp 
	ifThenElse : IF . exp THEN exp ELSE exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 53
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 21:

	forExp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 54


	.	error


state 22:

	exp : BREAK .  (reduce by rule 17)



	.	reduce by rule 17


state 23:

	exp : STRING .  (reduce by rule 3)



	.	reduce by rule 3


state 24:

	arrCreate : ID . LBRACKETS exp RBRACKETS OF exp 
	callExp : ID . LPAREN argList RPAREN 
	lValue : ID . lValueTail 
	recCreate : ID . LBRACES fldCreat RBRACES 

	LPAREN	shift 59
	LBRACES	shift 58
	LBRACKETS	shift 57
	DOT	shift 56

	lValueTail	goto 55

	.	reduce by rule 76


state 25:

	exp : INTEGER .  (reduce by rule 2)



	.	reduce by rule 2


state 26:

	assignment : lValue ASSIGN . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 60
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 27:

	ifThenElse : exp OR . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 61
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 28:

	ifThenElse : exp AND . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 62
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 29:

	infixExp : exp GREATER . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 63
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 30:

	infixExp : exp LESS . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 64
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 31:

	infixExp : exp DIVIDE . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 65
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 32:

	infixExp : exp MULTIPLY . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 66
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 33:

	infixExp : exp EQUALS . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 67
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 34:

	infixExp : exp MINUS . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 68
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 35:

	infixExp : exp PLUS . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 69
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 36:

	infixExp : exp GREATEREQUAL . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 70
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 37:

	infixExp : exp LESSEQUAL . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 71
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 38:

	infixExp : exp NOTEQUAL . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 72
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 39:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	negation : MINUS exp .  (reduce by rule 23)

	MULTIPLY	shift 32
	DIVIDE	shift 31


	.	reduce by rule 23


state 40:

	seqExp : LPAREN expList . RPAREN 

	RPAREN	shift 73


	.	error


state 41:

	expList : exp . expListTail 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	SEMICOLON	shift 75
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27

	expListTail	goto 74

	.	reduce by rule 21


state 42:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	whileExp : WHILE exp . DO exp 

	DO	shift 76
	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	error


state 43:

	dec : varDec .  (reduce by rule 57)



	.	reduce by rule 57


state 44:

	dec : tyDecs .  (reduce by rule 56)
	tyDecs : tyDecs . tyDec 

	TYPE	shift 51

	tyDec	goto 77

	.	reduce by rule 56


state 45:

	tyDecs : tyDec .  (reduce by rule 59)



	.	reduce by rule 59


state 46:

	dec : funDecs .  (reduce by rule 58)
	funDecs : funDecs . funDec 

	FUNCTION	shift 52

	funDec	goto 78

	.	reduce by rule 58


state 47:

	funDecs : funDec .  (reduce by rule 69)



	.	reduce by rule 69


state 48:

	letExp : LET decList . IN expList END 

	IN	shift 79


	.	error


state 49:

	decList : dec .  (reduce by rule 54)
	decList : dec . decList 

	FUNCTION	shift 52
	TYPE	shift 51
	VAR	shift 50

	dec	goto 49
	decList	goto 80
	funDec	goto 47
	funDecs	goto 46
	tyDec	goto 45
	tyDecs	goto 44
	varDec	goto 43

	.	reduce by rule 54


state 50:

	varDec : VAR . ID ASSIGN exp 
	varDec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 81


	.	error


state 51:

	tyDec : TYPE . ID EQUALS ID 
	tyDec : TYPE . ID EQUALS ARRAY OF ID 
	tyDec : TYPE . ID EQUALS LBRACES fldDec RBRACES 

	ID	shift 82


	.	error


state 52:

	funDec : FUNCTION . ID LPAREN fldDec RPAREN EQUALS exp 
	funDec : FUNCTION . ID LPAREN fldDec RPAREN COLON ID EQUALS exp 

	ID	shift 83


	.	error


state 53:

	ifThen : IF exp . THEN exp 
	ifThenElse : IF exp . THEN exp ELSE exp 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	THEN	shift 84
	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	error


state 54:

	forExp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 85


	.	error


state 55:

	lValue : ID lValueTail .  (reduce by rule 75)



	.	reduce by rule 75


state 56:

	lValueTail : DOT . ID lValueTail 

	ID	shift 86


	.	error


state 57:

	arrCreate : ID LBRACKETS . exp RBRACKETS OF exp 
	lValueTail : LBRACKETS . exp RBRACKETS lValueTail 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 87
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 58:

	recCreate : ID LBRACES . fldCreat RBRACES 

	ID	shift 90

	fldC	goto 89
	fldCreat	goto 88

	.	reduce by rule 42


state 59:

	callExp : ID LPAREN . argList RPAREN 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	argList	goto 92
	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 91
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	reduce by rule 25


state 60:

	assignment : lValue ASSIGN exp .  (reduce by rule 46)
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 46


state 61:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	ifThenElse : exp OR exp .  (reduce by rule 49)
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28


	.	reduce by rule 49


state 62:

	ifThenElse : exp . AND exp 
	ifThenElse : exp AND exp .  (reduce by rule 48)
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29


	.	reduce by rule 48


state 63:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp GREATER exp .  (reduce by rule 33)
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	DO	reduce by rule 33
	ELSE	reduce by rule 33
	END	reduce by rule 33
	FUNCTION	reduce by rule 33
	IN	reduce by rule 33
	THEN	reduce by rule 33
	TO	reduce by rule 33
	TYPE	reduce by rule 33
	VAR	reduce by rule 33
	RPAREN	reduce by rule 33
	RBRACES	reduce by rule 33
	RBRACKETS	reduce by rule 33
	SEMICOLON	reduce by rule 33
	COMMA	reduce by rule 33
	PLUS	shift 35
	MINUS	shift 34
	MULTIPLY	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 33
	OR	reduce by rule 33
	EOF	reduce by rule 33


	.	error


state 64:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp LESS exp .  (reduce by rule 34)
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	DO	reduce by rule 34
	ELSE	reduce by rule 34
	END	reduce by rule 34
	FUNCTION	reduce by rule 34
	IN	reduce by rule 34
	THEN	reduce by rule 34
	TO	reduce by rule 34
	TYPE	reduce by rule 34
	VAR	reduce by rule 34
	RPAREN	reduce by rule 34
	RBRACES	reduce by rule 34
	RBRACKETS	reduce by rule 34
	SEMICOLON	reduce by rule 34
	COMMA	reduce by rule 34
	PLUS	shift 35
	MINUS	shift 34
	MULTIPLY	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 34
	OR	reduce by rule 34
	EOF	reduce by rule 34


	.	error


state 65:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp DIVIDE exp .  (reduce by rule 32)
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 



	.	reduce by rule 32


state 66:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp MULTIPLY exp .  (reduce by rule 31)
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 



	.	reduce by rule 31


state 67:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp EQUALS exp .  (reduce by rule 35)
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	DO	reduce by rule 35
	ELSE	reduce by rule 35
	END	reduce by rule 35
	FUNCTION	reduce by rule 35
	IN	reduce by rule 35
	THEN	reduce by rule 35
	TO	reduce by rule 35
	TYPE	reduce by rule 35
	VAR	reduce by rule 35
	RPAREN	reduce by rule 35
	RBRACES	reduce by rule 35
	RBRACKETS	reduce by rule 35
	SEMICOLON	reduce by rule 35
	COMMA	reduce by rule 35
	PLUS	shift 35
	MINUS	shift 34
	MULTIPLY	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 35
	OR	reduce by rule 35
	EOF	reduce by rule 35


	.	error


state 68:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp MINUS exp .  (reduce by rule 30)
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	MULTIPLY	shift 32
	DIVIDE	shift 31


	.	reduce by rule 30


state 69:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp PLUS exp .  (reduce by rule 29)
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	MULTIPLY	shift 32
	DIVIDE	shift 31


	.	reduce by rule 29


state 70:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	infixExp : exp GREATEREQUAL exp .  (reduce by rule 38)

	DO	reduce by rule 38
	ELSE	reduce by rule 38
	END	reduce by rule 38
	FUNCTION	reduce by rule 38
	IN	reduce by rule 38
	THEN	reduce by rule 38
	TO	reduce by rule 38
	TYPE	reduce by rule 38
	VAR	reduce by rule 38
	RPAREN	reduce by rule 38
	RBRACES	reduce by rule 38
	RBRACKETS	reduce by rule 38
	SEMICOLON	reduce by rule 38
	COMMA	reduce by rule 38
	PLUS	shift 35
	MINUS	shift 34
	MULTIPLY	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 38
	OR	reduce by rule 38
	EOF	reduce by rule 38


	.	error


state 71:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp LESSEQUAL exp .  (reduce by rule 37)
	infixExp : exp . GREATEREQUAL exp 

	DO	reduce by rule 37
	ELSE	reduce by rule 37
	END	reduce by rule 37
	FUNCTION	reduce by rule 37
	IN	reduce by rule 37
	THEN	reduce by rule 37
	TO	reduce by rule 37
	TYPE	reduce by rule 37
	VAR	reduce by rule 37
	RPAREN	reduce by rule 37
	RBRACES	reduce by rule 37
	RBRACKETS	reduce by rule 37
	SEMICOLON	reduce by rule 37
	COMMA	reduce by rule 37
	PLUS	shift 35
	MINUS	shift 34
	MULTIPLY	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 37
	OR	reduce by rule 37
	EOF	reduce by rule 37


	.	error


state 72:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp NOTEQUAL exp .  (reduce by rule 36)
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	DO	reduce by rule 36
	ELSE	reduce by rule 36
	END	reduce by rule 36
	FUNCTION	reduce by rule 36
	IN	reduce by rule 36
	THEN	reduce by rule 36
	TO	reduce by rule 36
	TYPE	reduce by rule 36
	VAR	reduce by rule 36
	RPAREN	reduce by rule 36
	RBRACES	reduce by rule 36
	RBRACKETS	reduce by rule 36
	SEMICOLON	reduce by rule 36
	COMMA	reduce by rule 36
	PLUS	shift 35
	MINUS	shift 34
	MULTIPLY	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 36
	OR	reduce by rule 36
	EOF	reduce by rule 36


	.	error


state 73:

	seqExp : LPAREN expList RPAREN .  (reduce by rule 18)



	.	reduce by rule 18


state 74:

	expList : exp expListTail .  (reduce by rule 20)



	.	reduce by rule 20


state 75:

	expListTail : SEMICOLON . exp expListTail 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 93
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 76:

	whileExp : WHILE exp DO . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 94
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 77:

	tyDecs : tyDecs tyDec .  (reduce by rule 60)



	.	reduce by rule 60


state 78:

	funDecs : funDecs funDec .  (reduce by rule 70)



	.	reduce by rule 70


state 79:

	letExp : LET decList IN . expList END 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 41
	expList	goto 95
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	reduce by rule 19


state 80:

	decList : dec decList .  (reduce by rule 55)



	.	reduce by rule 55


state 81:

	varDec : VAR ID . ASSIGN exp 
	varDec : VAR ID . COLON ID ASSIGN exp 

	ASSIGN	shift 97
	COLON	shift 96


	.	error


state 82:

	tyDec : TYPE ID . EQUALS ID 
	tyDec : TYPE ID . EQUALS ARRAY OF ID 
	tyDec : TYPE ID . EQUALS LBRACES fldDec RBRACES 

	EQUALS	shift 98


	.	error


state 83:

	funDec : FUNCTION ID . LPAREN fldDec RPAREN EQUALS exp 
	funDec : FUNCTION ID . LPAREN fldDec RPAREN COLON ID EQUALS exp 

	LPAREN	shift 99


	.	error


state 84:

	ifThen : IF exp THEN . exp 
	ifThenElse : IF exp THEN . exp ELSE exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 100
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 85:

	forExp : FOR ID ASSIGN . exp TO exp DO exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 101
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 86:

	lValueTail : DOT ID . lValueTail 

	LBRACKETS	shift 103
	DOT	shift 56

	lValueTail	goto 102

	.	reduce by rule 76


state 87:

	arrCreate : ID LBRACKETS exp . RBRACKETS OF exp 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	lValueTail : LBRACKETS exp . RBRACKETS lValueTail 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	RBRACKETS	shift 104
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	error


state 88:

	recCreate : ID LBRACES fldCreat . RBRACES 

	RBRACES	shift 105


	.	error


state 89:

	fldCreat : fldC . fldCreatTail 

	COMMA	shift 107

	fldCreatTail	goto 106

	.	reduce by rule 44


state 90:

	fldC : ID . EQUALS exp 

	EQUALS	shift 108


	.	error


state 91:

	argList : exp . argListTail 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	COMMA	shift 110
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27

	argListTail	goto 109

	.	reduce by rule 27


state 92:

	callExp : ID LPAREN argList . RPAREN 

	RPAREN	shift 111


	.	error


state 93:

	expListTail : SEMICOLON exp . expListTail 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	SEMICOLON	shift 75
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27

	expListTail	goto 112

	.	reduce by rule 21


state 94:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	whileExp : WHILE exp DO exp .  (reduce by rule 51)

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 51


state 95:

	letExp : LET decList IN expList . END 

	END	shift 113


	.	error


state 96:

	varDec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 114


	.	error


state 97:

	varDec : VAR ID ASSIGN . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 115
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 98:

	tyDec : TYPE ID EQUALS . ID 
	tyDec : TYPE ID EQUALS . ARRAY OF ID 
	tyDec : TYPE ID EQUALS . LBRACES fldDec RBRACES 

	ID	shift 118
	ARRAY	shift 117
	LBRACES	shift 116


	.	error


state 99:

	funDec : FUNCTION ID LPAREN . fldDec RPAREN EQUALS exp 
	funDec : FUNCTION ID LPAREN . fldDec RPAREN COLON ID EQUALS exp 

	ID	shift 121

	fldD	goto 120
	fldDec	goto 119

	.	reduce by rule 65


state 100:

	ifThen : IF exp THEN exp .  (reduce by rule 50)
	ifThenElse : IF exp THEN exp . ELSE exp 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	ELSE	shift 122
	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 50


state 101:

	forExp : FOR ID ASSIGN exp . TO exp DO exp 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	TO	shift 123
	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	error


state 102:

	lValueTail : DOT ID lValueTail .  (reduce by rule 78)



	.	reduce by rule 78


state 103:

	lValueTail : LBRACKETS . exp RBRACKETS lValueTail 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 124
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 104:

	arrCreate : ID LBRACKETS exp RBRACKETS . OF exp 
	lValueTail : LBRACKETS exp RBRACKETS . lValueTail 

	OF	shift 126
	LBRACKETS	shift 103
	DOT	shift 56

	lValueTail	goto 125

	.	reduce by rule 76


state 105:

	recCreate : ID LBRACES fldCreat RBRACES .  (reduce by rule 40)



	.	reduce by rule 40


state 106:

	fldCreat : fldC fldCreatTail .  (reduce by rule 43)



	.	reduce by rule 43


state 107:

	fldCreatTail : COMMA . fldC fldCreatTail 

	ID	shift 90

	fldC	goto 127

	.	error


state 108:

	fldC : ID EQUALS . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 128
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 109:

	argList : exp argListTail .  (reduce by rule 26)



	.	reduce by rule 26


state 110:

	argListTail : COMMA . exp argListTail 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 129
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 111:

	callExp : ID LPAREN argList RPAREN .  (reduce by rule 24)



	.	reduce by rule 24


state 112:

	expListTail : SEMICOLON exp expListTail .  (reduce by rule 22)



	.	reduce by rule 22


state 113:

	letExp : LET decList IN expList END .  (reduce by rule 53)



	.	reduce by rule 53


state 114:

	varDec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 130


	.	error


state 115:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	varDec : VAR ID ASSIGN exp .  (reduce by rule 73)

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 73


state 116:

	tyDec : TYPE ID EQUALS LBRACES . fldDec RBRACES 

	ID	shift 121

	fldD	goto 120
	fldDec	goto 131

	.	reduce by rule 65


state 117:

	tyDec : TYPE ID EQUALS ARRAY . OF ID 

	OF	shift 132


	.	error


state 118:

	tyDec : TYPE ID EQUALS ID .  (reduce by rule 61)



	.	reduce by rule 61


state 119:

	funDec : FUNCTION ID LPAREN fldDec . RPAREN EQUALS exp 
	funDec : FUNCTION ID LPAREN fldDec . RPAREN COLON ID EQUALS exp 

	RPAREN	shift 133


	.	error


state 120:

	fldDec : fldD . fldDecList 

	COMMA	shift 135

	fldDecList	goto 134

	.	reduce by rule 67


state 121:

	fldD : ID . COLON ID 

	COLON	shift 136


	.	error


state 122:

	ifThenElse : IF exp THEN exp ELSE . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 137
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 123:

	forExp : FOR ID ASSIGN exp TO . exp DO exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 138
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 124:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	lValueTail : LBRACKETS exp . RBRACKETS lValueTail 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	RBRACKETS	shift 139
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	error


state 125:

	lValueTail : LBRACKETS exp RBRACKETS lValueTail .  (reduce by rule 77)



	.	reduce by rule 77


state 126:

	arrCreate : ID LBRACKETS exp RBRACKETS OF . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 140
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 127:

	fldCreatTail : COMMA fldC . fldCreatTail 

	COMMA	shift 107

	fldCreatTail	goto 141

	.	reduce by rule 44


state 128:

	fldC : ID EQUALS exp .  (reduce by rule 41)
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 41


state 129:

	argListTail : COMMA exp . argListTail 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	COMMA	shift 110
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27

	argListTail	goto 142

	.	reduce by rule 27


state 130:

	varDec : VAR ID COLON ID ASSIGN . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 143
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 131:

	tyDec : TYPE ID EQUALS LBRACES fldDec . RBRACES 

	RBRACES	shift 144


	.	error


state 132:

	tyDec : TYPE ID EQUALS ARRAY OF . ID 

	ID	shift 145


	.	error


state 133:

	funDec : FUNCTION ID LPAREN fldDec RPAREN . EQUALS exp 
	funDec : FUNCTION ID LPAREN fldDec RPAREN . COLON ID EQUALS exp 

	COLON	shift 147
	EQUALS	shift 146


	.	error


state 134:

	fldDec : fldD fldDecList .  (reduce by rule 66)



	.	reduce by rule 66


state 135:

	fldDecList : COMMA . fldD fldDecList 

	ID	shift 121

	fldD	goto 148

	.	error


state 136:

	fldD : ID COLON . ID 

	ID	shift 149


	.	error


state 137:

	ifThenElse : IF exp THEN exp ELSE exp .  (reduce by rule 47)
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 47


state 138:

	forExp : FOR ID ASSIGN exp TO exp . DO exp 
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	DO	shift 150
	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	error


state 139:

	lValueTail : LBRACKETS exp RBRACKETS . lValueTail 

	LBRACKETS	shift 103
	DOT	shift 56

	lValueTail	goto 125

	.	reduce by rule 76


state 140:

	arrCreate : ID LBRACKETS exp RBRACKETS OF exp .  (reduce by rule 39)
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 39


state 141:

	fldCreatTail : COMMA fldC fldCreatTail .  (reduce by rule 45)



	.	reduce by rule 45


state 142:

	argListTail : COMMA exp argListTail .  (reduce by rule 28)



	.	reduce by rule 28


state 143:

	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 
	varDec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 74)

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 74


state 144:

	tyDec : TYPE ID EQUALS LBRACES fldDec RBRACES .  (reduce by rule 63)



	.	reduce by rule 63


state 145:

	tyDec : TYPE ID EQUALS ARRAY OF ID .  (reduce by rule 62)



	.	reduce by rule 62


state 146:

	funDec : FUNCTION ID LPAREN fldDec RPAREN EQUALS . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 151
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 147:

	funDec : FUNCTION ID LPAREN fldDec RPAREN COLON . ID EQUALS exp 

	ID	shift 152


	.	error


state 148:

	fldDecList : COMMA fldD . fldDecList 

	COMMA	shift 135

	fldDecList	goto 153

	.	reduce by rule 67


state 149:

	fldD : ID COLON ID .  (reduce by rule 64)



	.	reduce by rule 64


state 150:

	forExp : FOR ID ASSIGN exp TO exp DO . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 154
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 151:

	funDec : FUNCTION ID LPAREN fldDec RPAREN EQUALS exp .  (reduce by rule 71)
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 71


state 152:

	funDec : FUNCTION ID LPAREN fldDec RPAREN COLON ID . EQUALS exp 

	EQUALS	shift 155


	.	error


state 153:

	fldDecList : COMMA fldD fldDecList .  (reduce by rule 68)



	.	reduce by rule 68


state 154:

	forExp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 52)
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 52


state 155:

	funDec : FUNCTION ID LPAREN fldDec RPAREN COLON ID EQUALS . exp 

	INTEGER	shift 25
	ID	shift 24
	STRING	shift 23
	BREAK	shift 22
	FOR	shift 21
	IF	shift 20
	LET	shift 19
	NIL	shift 18
	WHILE	shift 17
	LPAREN	shift 16
	MINUS	shift 15

	arrCreate	goto 14
	assignment	goto 13
	callExp	goto 12
	exp	goto 156
	forExp	goto 10
	ifThen	goto 9
	ifThenElse	goto 8
	infixExp	goto 7
	letExp	goto 6
	lValue	goto 5
	negation	goto 4
	recCreate	goto 3
	seqExp	goto 2
	whileExp	goto 1

	.	error


state 156:

	funDec : FUNCTION ID LPAREN fldDec RPAREN COLON ID EQUALS exp .  (reduce by rule 72)
	ifThenElse : exp . AND exp 
	ifThenElse : exp . OR exp 
	infixExp : exp . PLUS exp 
	infixExp : exp . MINUS exp 
	infixExp : exp . MULTIPLY exp 
	infixExp : exp . DIVIDE exp 
	infixExp : exp . GREATER exp 
	infixExp : exp . LESS exp 
	infixExp : exp . EQUALS exp 
	infixExp : exp . NOTEQUAL exp 
	infixExp : exp . LESSEQUAL exp 
	infixExp : exp . GREATEREQUAL exp 

	NOTEQUAL	shift 38
	LESSEQUAL	shift 37
	GREATEREQUAL	shift 36
	PLUS	shift 35
	MINUS	shift 34
	EQUALS	shift 33
	MULTIPLY	shift 32
	DIVIDE	shift 31
	LESS	shift 30
	GREATER	shift 29
	AND	shift 28
	OR	shift 27


	.	reduce by rule 72


state 157:


	EOF	accept


	.	error

491 of 1043 action table entries left after compaction
544 goto table entries
