(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%

(* Name of the parser *)
%name PrettyPrinter

(* Produces verbose description of the generated LALR parser *)
%verbose

(* type to capture the position of a token within a file *)
%pos int

(* The terminals or tokens of the language.
   Similar to ML datatype declaration.
   The terminals with no datatype have no value associated with them *)
%term INTEGER of int
    | ID of string
    | STRING of string
    | COMMENT of string
    | ARRAY
    | BREAK
    | DO
    | ELSE
    | END
    | FOR
    | FUNCTION
    | IF
    | IN
    | LET
    | NIL
    | OF
    | THEN
    | TO
    | TYPE
    | VAR
    | WHILE
    | NOTEQUAL
    | LESSEQUAL
    | GREATEREQUAL
    | ASSIGN
    | LPAREN
    | RPAREN
    | LBRACES
    | RBRACES
    | LBRACKETS
    | RBRACKETS
    | COLON
    | DOT
    | SEMICOLON
    | COMMA
    | PLUS
    | MINUS
    | EQUALS
    | MULTIPLY
    | DIVIDE 
    | LESS
    | GREATER
    | AND
    | OR
    
(* The nonterminals or symbols of the language.
   The types for the nonterminals are the correspoding abstract syntax used to capture the semantic 
   meaning of the values associated with the nonterminal *)
%nonterm PROGRAM                of Ast.Program
       | EXP                    of Ast.Exp
       | EXPS                   of Ast.Exp list
       | LVALUE                 of Ast.Lvalue
       | RECORDFIELDDEC         of Ast.TypeDec
       | RECORDFIELDCREATE      of Ast.Exp
       | DECS                   of Ast.Decs
       | TYPEDEC                of Ast.TypeDec
       | FUNDEC                 of Ast.FunDec
       | VARDEC                 of Ast.VarDec
       | OPERATOR               of Ast.Operator

%eop EOF                (* the set of terminals that may follow the start symbol *)
%pure                   (* the semantic actions are free of significant side-effects and always terminate *)
%noshift EOF            (* non-shiftable terminals *)
%arg (fileName) : string


(* Specifying the precedence and associativity of operators *)
%left OR
%left AND 
%nonassoc GREATEREQUAL LESSEQUAL EQUALS NOTEQUAL LESS GREATER
%left PLUS MINUS
%left MULTIPLY DIVIDE
%left ASSIGN

%%

(* The grammar associated with our program *)
PROGRAM : EXP                       ( EXP )

EXP     : NIL
        | INTEGER
        | STRING
        | LVALUE
        | MINUS EXP
        | LPAREN EXPS RPAREN
        | LPAREN RPAREN
        | ID LPAREN EXPS RPAREN
        | ID LPAREN RPAREN
        | EXP OPERATOR EXP
        | ID LBRACKETS EXP RBRACKETS OF EXP
        | ID LBRACES RECORDFIELDDEC RBRACES
        | LVALUE ASSIGN EXP
        | IF EXP THEN EXP ELSE EXP
        | IF EXP THEN EXP
        | WHILE EXP DO EXP
        | FOR ID ASSIGN EXP TO EXP DO EXP
        | LET DECS IN EXPS END
        | LET DECS IN END

EXPS    : EXP
        | EXP SEMICOLON EXPS

LVALUE  : ID
        | LVALUE LBRACKETS EXP RBRACKETS
        | LVALUE DOT ID

RECORDFIELDDEC
        : ID EQUALS EXP 
        | ID EQUALS EXP COMMA RECORDFIELDDEC

DECS    : TYPEDEC
        | VARDEC
        | FUNDEC

TYPEDEC : TYPE ID EQUALS ID
        | TYPE ID EQUALS ARRAY OF ID
        | TYPE ID EQUALS LBRACES RECORDFIELDCREATE RBRACES

RECORDFIELDCREATE 
        : ID COLON ID
        | ID COLON ID SEMICOLON RECORDFIELDCREATE

FUNDEC  : FUNCTION ID LPAREN RECORDFIELDCREATE RPAREN EQUALS EXP
        | FUNCTION ID LPAREN RPAREN EQUALS EXP
        | FUNCTION ID LPAREN RECORDFIELDCREATE RPAREN COLON ID EQUALS EXP
        | FUNCTION ID LPAREN RPAREN COLON ID EQUALS EXP

VARDEC  : VAR ID ASSIGN EXP
        | VAR ID COLON ID ASSIGN EXP

OPERATOR 
        : PLUS
        | MINUS
        | MULTIPLY
        | DIVIDE
        | GREATER
        | LESS
        | EQUALS
        | NOTEQUAL
        | LESSEQUAL
        | GREATEREQUAL