structure Mlex=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "lexer.lex"*)structure Tokens = struct
    datatype token = COMMENT of string * int * int |
                     EOF of int * int |
                     OPERATOR of string * int * int |
                     KEYWORD of string * int * int |
                     ID of string * int * int |
                     INT of int * int * int |
                     STRING of string * int * int |
                     ESCAPE of string * int * int |
                     WHITESPACE of string * int * int;
end;

val inString = ref 0;
val prevLineNum = ref 0;
val lineNum = ref 1;
val prevCharNum = ref 0;
val charNum = ref 1;
val commentCnt = ref 0;

type lexresult = Tokens.token;
fun eof () = if !commentCnt > 0 then (print ("improper comments\n"); Tokens.EOF (0, 0)) else 
             if !inString > 0 then (print ("improper string\n"); Tokens.EOF(0, 0)) else
             (print ("\n"); Tokens.EOF(0, 0));
(*#line 28.1 "lexer.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\009\009\009\009\009\009\009\009\009\062\064\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\062\009\061\009\009\009\011\009\010\010\011\011\011\010\011\059\
\\057\057\057\057\057\057\057\057\057\057\056\011\055\011\053\009\
\\009\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\
\\012\012\012\012\012\012\012\012\012\012\012\010\009\010\009\009\
\\009\049\045\012\044\040\032\012\012\031\012\012\029\012\027\026\
\\012\012\012\012\021\012\019\014\012\012\012\010\011\010\009\009\
\\009"
),
 (3, 
"\065\065\065\065\065\065\065\065\065\065\071\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\069\065\065\065\065\067\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\065\
\\065"
),
 (5, 
"\072\072\072\072\072\072\072\072\072\072\082\072\072\072\072\072\
\\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\
\\072\072\081\072\072\072\072\072\072\072\072\072\072\072\072\072\
\\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\
\\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\
\\072\072\072\072\072\072\072\072\072\072\072\072\074\072\072\072\
\\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\
\\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\072\
\\072"
),
 (7, 
"\009\009\009\009\009\009\009\009\009\084\087\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\084\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\083\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\015\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\016\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\017\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\018\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\020\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\018\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\024\013\013\013\013\013\013\018\
\\013\013\013\013\013\013\013\013\013\022\013\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\023\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\025\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\018\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\018\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\028\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\018\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\030\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\018\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\018\013\013\013\013\013\013\013\018\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\039\
\\013\013\013\013\013\033\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\034\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\035\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\036\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\037\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\038\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\042\013\041\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\018\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (42, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\043\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\018\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\046\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\047\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\048\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\018\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\050\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\051\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\052\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\013\013\013\013\013\013\013\013\013\013\000\000\000\000\000\000\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\000\000\000\000\013\
\\000\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\013\013\013\013\013\013\013\013\013\018\013\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\054\054\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\058\058\058\058\058\058\058\058\058\058\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\063\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (65, 
"\066\066\066\066\066\066\066\066\066\066\000\066\066\066\066\066\
\\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\
\\066\066\066\066\066\066\066\066\066\066\000\066\066\066\066\000\
\\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\
\\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\
\\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\
\\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\
\\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\066\
\\066"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\068\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (72, 
"\073\073\073\073\073\073\073\073\073\073\000\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\000\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\000\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\073\
\\073"
),
 (74, 
"\000\000\000\000\000\000\000\000\000\079\080\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\079\000\075\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\077\077\077\077\077\077\077\077\077\077\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\075\000\076\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (76, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000"
),
 (77, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\078\078\078\078\078\078\078\078\078\078\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\079\080\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\079\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (84, 
"\000\000\000\000\000\000\000\000\000\086\087\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\086\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [], trans = 7},
{fin = [], trans = 7},
{fin = [(N 137)], trans = 0},
{fin = [(N 127),(N 137)], trans = 0},
{fin = [(N 129),(N 137)], trans = 0},
{fin = [(N 135),(N 137)], trans = 12},
{fin = [(N 135)], trans = 12},
{fin = [(N 135),(N 137)], trans = 14},
{fin = [(N 135)], trans = 15},
{fin = [(N 135)], trans = 16},
{fin = [(N 135)], trans = 17},
{fin = [(N 111),(N 135)], trans = 12},
{fin = [(N 135),(N 137)], trans = 19},
{fin = [(N 135)], trans = 20},
{fin = [(N 135),(N 137)], trans = 21},
{fin = [(N 135)], trans = 22},
{fin = [(N 135)], trans = 17},
{fin = [(N 135)], trans = 24},
{fin = [(N 135)], trans = 25},
{fin = [(N 135),(N 137)], trans = 26},
{fin = [(N 135),(N 137)], trans = 27},
{fin = [(N 135)], trans = 28},
{fin = [(N 135),(N 137)], trans = 29},
{fin = [(N 135)], trans = 30},
{fin = [(N 135),(N 137)], trans = 31},
{fin = [(N 135),(N 137)], trans = 32},
{fin = [(N 135)], trans = 33},
{fin = [(N 135)], trans = 34},
{fin = [(N 135)], trans = 35},
{fin = [(N 135)], trans = 36},
{fin = [(N 135)], trans = 37},
{fin = [(N 135)], trans = 25},
{fin = [(N 135)], trans = 20},
{fin = [(N 135),(N 137)], trans = 40},
{fin = [(N 135)], trans = 41},
{fin = [(N 135)], trans = 42},
{fin = [(N 135)], trans = 17},
{fin = [(N 135),(N 137)], trans = 44},
{fin = [(N 135),(N 137)], trans = 45},
{fin = [(N 135)], trans = 46},
{fin = [(N 135)], trans = 47},
{fin = [(N 135)], trans = 48},
{fin = [(N 135),(N 137)], trans = 49},
{fin = [(N 135)], trans = 50},
{fin = [(N 135)], trans = 51},
{fin = [(N 135)], trans = 52},
{fin = [(N 129),(N 137)], trans = 53},
{fin = [(N 127)], trans = 0},
{fin = [(N 129),(N 137)], trans = 55},
{fin = [(N 129),(N 137)], trans = 53},
{fin = [(N 132),(N 137)], trans = 57},
{fin = [(N 132)], trans = 57},
{fin = [(N 129),(N 137)], trans = 59},
{fin = [(N 7)], trans = 0},
{fin = [(N 22),(N 137)], trans = 0},
{fin = [(N 4),(N 137)], trans = 62},
{fin = [(N 4)], trans = 62},
{fin = [(N 1)], trans = 0},
{fin = [(N 20),(N 137)], trans = 65},
{fin = [(N 20)], trans = 65},
{fin = [(N 17),(N 137)], trans = 67},
{fin = [(N 10)], trans = 0},
{fin = [(N 17),(N 137)], trans = 69},
{fin = [(N 13)], trans = 0},
{fin = [(N 15)], trans = 0},
{fin = [(N 25),(N 137)], trans = 72},
{fin = [(N 25)], trans = 72},
{fin = [(N 137)], trans = 74},
{fin = [(N 36)], trans = 0},
{fin = [], trans = 76},
{fin = [], trans = 77},
{fin = [], trans = 78},
{fin = [], trans = 79},
{fin = [(N 40)], trans = 0},
{fin = [(N 48),(N 137)], trans = 0},
{fin = [(N 50)], trans = 0},
{fin = [(N 46),(N 137)], trans = 0},
{fin = [(N 137)], trans = 84},
{fin = [(N 46)], trans = 0},
{fin = [], trans = 84},
{fin = [(N 43)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val MULTILINE_STRING = STARTSTATE 7;
val STRING = STARTSTATE 5;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => let val yytext=yymktext() in (*#line 34.52 "lexer.lex"*) prevLineNum := !lineNum; 
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    Tokens.WHITESPACE (yytext, !prevLineNum, !prevCharNum) (*#line 789.1 "lexer.lex.sml"*)
 end
| 10 => let val yytext=yymktext() in (*#line 47.52 "lexer.lex"*) commentCnt := !commentCnt + 1;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COMMENT (yytext, !lineNum, !prevCharNum) (*#line 794.1 "lexer.lex.sml"*)
 end
| 111 => let val yytext=yymktext() in (*#line 106.52 "lexer.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.KEYWORD (yytext, !lineNum, !prevCharNum) (*#line 799.1 "lexer.lex.sml"*)
 end
| 127 => let val yytext=yymktext() in (*#line 111.52 "lexer.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.OPERATOR (yytext, !lineNum, !prevCharNum) (*#line 804.1 "lexer.lex.sml"*)
 end
| 129 => let val yytext=yymktext() in (*#line 115.52 "lexer.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.OPERATOR (yytext, !lineNum, !prevCharNum) (*#line 809.1 "lexer.lex.sml"*)
 end
| 13 => let val yytext=yymktext() in (*#line 51.52 "lexer.lex"*) commentCnt := !commentCnt - 1;
                                                    if !commentCnt = 0 then (YYBEGIN INITIAL) else (YYBEGIN COMMENT);
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COMMENT (yytext, !lineNum, !prevCharNum) (*#line 815.1 "lexer.lex.sml"*)
 end
| 132 => let val yytext=yymktext() in (*#line 119.52 "lexer.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.INT (valOf (Int.fromString yytext), !lineNum, !prevCharNum) (*#line 820.1 "lexer.lex.sml"*)
 end
| 135 => let val yytext=yymktext() in (*#line 123.52 "lexer.lex"*) YYBEGIN INITIAL;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ID (yytext, !lineNum, !prevCharNum) (*#line 825.1 "lexer.lex.sml"*)
 end
| 137 => ((*#line 127.52 "lexer.lex"*) print ("illegal character"); continue() (*#line 827.1 "lexer.lex.sml"*)
)
| 15 => let val yytext=yymktext() in (*#line 56.52 "lexer.lex"*) prevLineNum := !lineNum; 
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    Tokens.COMMENT (yytext, !prevLineNum, !prevCharNum) (*#line 833.1 "lexer.lex.sml"*)
 end
| 17 => let val yytext=yymktext() in (*#line 61.52 "lexer.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COMMENT (yytext, !lineNum, !prevCharNum) (*#line 837.1 "lexer.lex.sml"*)
 end
| 20 => let val yytext=yymktext() in (*#line 64.52 "lexer.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COMMENT (yytext, !lineNum, !prevCharNum) (*#line 841.1 "lexer.lex.sml"*)
 end
| 22 => let val yytext=yymktext() in (*#line 67.52 "lexer.lex"*) YYBEGIN STRING;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.STRING (yytext, !lineNum, !prevCharNum) (*#line 846.1 "lexer.lex.sml"*)
 end
| 25 => let val yytext=yymktext() in (*#line 71.52 "lexer.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.STRING (yytext, !lineNum, !prevCharNum) (*#line 850.1 "lexer.lex.sml"*)
 end
| 36 => let val yytext=yymktext() in (*#line 75.52 "lexer.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ESCAPE (yytext, !lineNum, !prevCharNum) (*#line 854.1 "lexer.lex.sml"*)
 end
| 4 => let val yytext=yymktext() in (*#line 39.52 "lexer.lex"*) prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.WHITESPACE (yytext, !lineNum, !prevCharNum) (*#line 858.1 "lexer.lex.sml"*)
 end
| 40 => let val yytext=yymktext() in (*#line 78.52 "lexer.lex"*) YYBEGIN MULTILINE_STRING;
                                                    prevLineNum := !lineNum;
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    Tokens.ESCAPE (yytext, !prevLineNum, !prevCharNum) (*#line 865.1 "lexer.lex.sml"*)
 end
| 43 => let val yytext=yymktext() in (*#line 84.52 "lexer.lex"*) prevLineNum := !lineNum;
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    Tokens.ESCAPE (yytext, !prevLineNum, !prevCharNum) (*#line 871.1 "lexer.lex.sml"*)
 end
| 46 => let val yytext=yymktext() in (*#line 89.52 "lexer.lex"*) YYBEGIN STRING;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.ESCAPE (yytext, !lineNum, !prevCharNum) (*#line 876.1 "lexer.lex.sml"*)
 end
| 48 => let val yytext=yymktext() in (*#line 93.52 "lexer.lex"*) YYBEGIN INITIAL;
                                                    inString := 0;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.STRING (yytext, !lineNum, !prevCharNum) (*#line 882.1 "lexer.lex.sml"*)
 end
| 50 => let val yytext=yymktext() in (*#line 98.52 "lexer.lex"*) YYBEGIN INITIAL;
                                                    inString := 1;
                                                    prevLineNum := !lineNum; 
                                                    prevCharNum := !charNum;
                                                    lineNum := !lineNum + 1;
                                                    charNum := 1;
                                                    Tokens.STRING (yytext, !prevLineNum, !prevCharNum) (*#line 890.1 "lexer.lex.sml"*)
 end
| 7 => let val yytext=yymktext() in (*#line 42.52 "lexer.lex"*) YYBEGIN COMMENT;
                                                    commentCnt := !commentCnt + 1;
                                                    prevCharNum := !charNum;
                                                    charNum := !charNum + size yytext;
                                                    Tokens.COMMENT (yytext, !lineNum, !prevCharNum) (*#line 896.1 "lexer.lex.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
